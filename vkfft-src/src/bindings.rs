/* automatically generated by rust-bindgen 0.60.1 */

pub type VkFlags = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBuffer_T {
    _unused: [u8; 0],
}
pub type VkBuffer = *mut VkBuffer_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevice_T {
    _unused: [u8; 0],
}
pub type VkPhysicalDevice = *mut VkPhysicalDevice_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDevice_T {
    _unused: [u8; 0],
}
pub type VkDevice = *mut VkDevice_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkQueue_T {
    _unused: [u8; 0],
}
pub type VkQueue = *mut VkQueue_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCommandBuffer_T {
    _unused: [u8; 0],
}
pub type VkCommandBuffer = *mut VkCommandBuffer_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFence_T {
    _unused: [u8; 0],
}
pub type VkFence = *mut VkFence_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceMemory_T {
    _unused: [u8; 0],
}
pub type VkDeviceMemory = *mut VkDeviceMemory_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineCache_T {
    _unused: [u8; 0],
}
pub type VkPipelineCache = *mut VkPipelineCache_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineLayout_T {
    _unused: [u8; 0],
}
pub type VkPipelineLayout = *mut VkPipelineLayout_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipeline_T {
    _unused: [u8; 0],
}
pub type VkPipeline = *mut VkPipeline_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorSetLayout_T {
    _unused: [u8; 0],
}
pub type VkDescriptorSetLayout = *mut VkDescriptorSetLayout_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorSet_T {
    _unused: [u8; 0],
}
pub type VkDescriptorSet = *mut VkDescriptorSet_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorPool_T {
    _unused: [u8; 0],
}
pub type VkDescriptorPool = *mut VkDescriptorPool_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCommandPool_T {
    _unused: [u8; 0],
}
pub type VkCommandPool = *mut VkCommandPool_T;
pub const VkStructureType_VK_STRUCTURE_TYPE_APPLICATION_INFO: VkStructureType = 0;
pub const VkStructureType_VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO: VkStructureType = 1;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO: VkStructureType = 2;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO: VkStructureType = 3;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBMIT_INFO: VkStructureType = 4;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO: VkStructureType = 5;
pub const VkStructureType_VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE: VkStructureType = 6;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_SPARSE_INFO: VkStructureType = 7;
pub const VkStructureType_VK_STRUCTURE_TYPE_FENCE_CREATE_INFO: VkStructureType = 8;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO: VkStructureType = 9;
pub const VkStructureType_VK_STRUCTURE_TYPE_EVENT_CREATE_INFO: VkStructureType = 10;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO: VkStructureType = 11;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO: VkStructureType = 12;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO: VkStructureType = 13;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO: VkStructureType = 14;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO: VkStructureType = 15;
pub const VkStructureType_VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO: VkStructureType = 16;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO: VkStructureType = 17;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO: VkStructureType = 18;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO:
    VkStructureType = 19;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO:
    VkStructureType = 20;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO:
    VkStructureType = 21;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO: VkStructureType =
    22;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO:
    VkStructureType = 23;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO:
    VkStructureType = 24;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO:
    VkStructureType = 25;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO:
    VkStructureType = 26;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO: VkStructureType =
    27;
pub const VkStructureType_VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO: VkStructureType = 28;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO: VkStructureType = 29;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO: VkStructureType = 30;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO: VkStructureType = 31;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO: VkStructureType = 32;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO: VkStructureType = 33;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO: VkStructureType = 34;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET: VkStructureType = 35;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET: VkStructureType = 36;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO: VkStructureType = 37;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO: VkStructureType = 38;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO: VkStructureType = 39;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO: VkStructureType = 40;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO: VkStructureType = 41;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO: VkStructureType = 42;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO: VkStructureType = 43;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER: VkStructureType = 44;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER: VkStructureType = 45;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_BARRIER: VkStructureType = 46;
pub const VkStructureType_VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO: VkStructureType = 47;
pub const VkStructureType_VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO: VkStructureType = 48;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES: VkStructureType =
    1000094000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO: VkStructureType = 1000157000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO: VkStructureType = 1000157001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES:
    VkStructureType = 1000083000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS: VkStructureType =
    1000127000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO: VkStructureType =
    1000127001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO: VkStructureType =
    1000060000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO: VkStructureType =
    1000060003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO:
    VkStructureType = 1000060004;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO: VkStructureType = 1000060005;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO: VkStructureType =
    1000060006;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO: VkStructureType =
    1000060013;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO: VkStructureType =
    1000060014;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES: VkStructureType =
    1000070000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO: VkStructureType =
    1000070001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2: VkStructureType =
    1000146000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2: VkStructureType =
    1000146001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2:
    VkStructureType = 1000146002;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2: VkStructureType = 1000146003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2: VkStructureType =
    1000146004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2: VkStructureType =
    1000059000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2: VkStructureType =
    1000059001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2: VkStructureType = 1000059002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2: VkStructureType = 1000059003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2: VkStructureType =
    1000059004;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2: VkStructureType = 1000059005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2: VkStructureType =
    1000059006;
pub const VkStructureType_VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2: VkStructureType =
    1000059007;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2:
    VkStructureType = 1000059008;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES:
    VkStructureType = 1000117000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO:
    VkStructureType = 1000117001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO: VkStructureType =
    1000117002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO : VkStructureType = 1000117003 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO: VkStructureType =
    1000053000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES: VkStructureType =
    1000053001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES: VkStructureType =
    1000053002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES:
    VkStructureType = 1000120000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO: VkStructureType = 1000145000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES:
    VkStructureType = 1000145001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES:
    VkStructureType = 1000145002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2: VkStructureType = 1000145003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO: VkStructureType =
    1000156000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO: VkStructureType =
    1000156001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO: VkStructureType =
    1000156002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO: VkStructureType =
    1000156003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES:
    VkStructureType = 1000156004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES:
    VkStructureType = 1000156005;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO:
    VkStructureType = 1000085000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO:
    VkStructureType = 1000071000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES: VkStructureType =
    1000071001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO: VkStructureType =
    1000071002;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES: VkStructureType =
    1000071003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES: VkStructureType =
    1000071004;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO: VkStructureType =
    1000072000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO: VkStructureType =
    1000072001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO: VkStructureType =
    1000072002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO: VkStructureType =
    1000112000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES: VkStructureType = 1000112001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO: VkStructureType = 1000113000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO: VkStructureType =
    1000077000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO:
    VkStructureType = 1000076000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES: VkStructureType =
    1000076001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES:
    VkStructureType = 1000168000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT: VkStructureType =
    1000168001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES:
    VkStructureType = 1000063000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES: VkStructureType =
    49;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES: VkStructureType =
    50;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES: VkStructureType =
    51;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES: VkStructureType =
    52;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO: VkStructureType =
    1000147000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2: VkStructureType = 1000109000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2: VkStructureType = 1000109001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2: VkStructureType = 1000109002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2: VkStructureType = 1000109003;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2: VkStructureType = 1000109004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO: VkStructureType = 1000109005;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_END_INFO: VkStructureType = 1000109006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES: VkStructureType =
    1000177000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES: VkStructureType =
    1000196000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES:
    VkStructureType = 1000180000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES:
    VkStructureType = 1000082000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES:
    VkStructureType = 1000197000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO:
    VkStructureType = 1000161000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES:
    VkStructureType = 1000161001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES:
    VkStructureType = 1000161002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO : VkStructureType = 1000161003 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT : VkStructureType = 1000161004 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES:
    VkStructureType = 1000199000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE:
    VkStructureType = 1000199001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES:
    VkStructureType = 1000221000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO: VkStructureType =
    1000246000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES:
    VkStructureType = 1000130000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO: VkStructureType =
    1000130001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES:
    VkStructureType = 1000211000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES:
    VkStructureType = 1000108000;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO: VkStructureType =
    1000108001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO: VkStructureType =
    1000108002;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO: VkStructureType =
    1000108003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES : VkStructureType = 1000253000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES : VkStructureType = 1000175000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES : VkStructureType = 1000241000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT: VkStructureType =
    1000241001;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT: VkStructureType =
    1000241002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES:
    VkStructureType = 1000261000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES:
    VkStructureType = 1000207000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES:
    VkStructureType = 1000207001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO: VkStructureType =
    1000207002;
pub const VkStructureType_VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO: VkStructureType =
    1000207003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO: VkStructureType = 1000207004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO: VkStructureType = 1000207005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES:
    VkStructureType = 1000257000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO: VkStructureType =
    1000244001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO:
    VkStructureType = 1000257002;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO:
    VkStructureType = 1000257003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO:
    VkStructureType = 1000257004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES: VkStructureType =
    53;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES: VkStructureType =
    54;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO:
    VkStructureType = 1000192000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES:
    VkStructureType = 1000215000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES: VkStructureType =
    1000245000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES : VkStructureType = 1000276000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES: VkStructureType =
    1000295000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO: VkStructureType =
    1000295001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO: VkStructureType =
    1000295002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES : VkStructureType = 1000297000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_BARRIER_2: VkStructureType = 1000314000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2: VkStructureType = 1000314001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2: VkStructureType = 1000314002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEPENDENCY_INFO: VkStructureType = 1000314003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBMIT_INFO_2: VkStructureType = 1000314004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO: VkStructureType = 1000314005;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO: VkStructureType =
    1000314006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES:
    VkStructureType = 1000314007;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES : VkStructureType = 1000325000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES:
    VkStructureType = 1000335000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2: VkStructureType = 1000337000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2: VkStructureType = 1000337001;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2: VkStructureType =
    1000337002;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2: VkStructureType =
    1000337003;
pub const VkStructureType_VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2: VkStructureType = 1000337004;
pub const VkStructureType_VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2: VkStructureType = 1000337005;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COPY_2: VkStructureType = 1000337006;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_COPY_2: VkStructureType = 1000337007;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_BLIT_2: VkStructureType = 1000337008;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2: VkStructureType = 1000337009;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2: VkStructureType = 1000337010;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES:
    VkStructureType = 1000225000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO : VkStructureType = 1000225001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES:
    VkStructureType = 1000225002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES:
    VkStructureType = 1000138000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES:
    VkStructureType = 1000138001;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK:
    VkStructureType = 1000138002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO:
    VkStructureType = 1000138003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES : VkStructureType = 1000066000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_INFO: VkStructureType = 1000044000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO: VkStructureType = 1000044001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO: VkStructureType =
    1000044002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES:
    VkStructureType = 1000044003;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO:
    VkStructureType = 1000044004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES:
    VkStructureType = 1000280000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES : VkStructureType = 1000280001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES:
    VkStructureType = 1000281001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3: VkStructureType = 1000360000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES:
    VkStructureType = 1000413000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES:
    VkStructureType = 1000413001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS: VkStructureType =
    1000413002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS: VkStructureType =
    1000413003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR: VkStructureType = 1000001000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRESENT_INFO_KHR: VkStructureType = 1000001001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR: VkStructureType =
    1000060007;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR: VkStructureType =
    1000060008;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR: VkStructureType =
    1000060009;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR: VkStructureType =
    1000060010;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR: VkStructureType =
    1000060011;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR:
    VkStructureType = 1000060012;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR: VkStructureType =
    1000002000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000002001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR: VkStructureType = 1000003000;
pub const VkStructureType_VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000004000;
pub const VkStructureType_VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000005000;
pub const VkStructureType_VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000006000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000008000;
pub const VkStructureType_VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000009000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT: VkStructureType =
    1000011000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD:
    VkStructureType = 1000018000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT: VkStructureType =
    1000022000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT: VkStructureType =
    1000022001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT: VkStructureType =
    1000022002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV:
    VkStructureType = 1000026000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV:
    VkStructureType = 1000026001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV:
    VkStructureType = 1000026002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT:
    VkStructureType = 1000028000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT:
    VkStructureType = 1000028001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT:
    VkStructureType = 1000028002;
pub const VkStructureType_VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX: VkStructureType = 1000029000;
pub const VkStructureType_VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX: VkStructureType =
    1000029001;
pub const VkStructureType_VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX: VkStructureType = 1000029002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX: VkStructureType =
    1000030000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX: VkStructureType =
    1000030001;
pub const VkStructureType_VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD:
    VkStructureType = 1000041000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR:
    VkStructureType = 1000044006;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT:
    VkStructureType = 1000044007;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD: VkStructureType =
    1000044008;
pub const VkStructureType_VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX:
    VkStructureType = 1000044009;
pub const VkStructureType_VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP:
    VkStructureType = 1000049000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV:
    VkStructureType = 1000050000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV: VkStructureType =
    1000056000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV: VkStructureType =
    1000056001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV: VkStructureType =
    1000057000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV: VkStructureType =
    1000057001;
pub const VkStructureType_VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV:
    VkStructureType = 1000058000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT: VkStructureType = 1000061000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN: VkStructureType = 1000062000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT: VkStructureType =
    1000067000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT:
    VkStructureType = 1000067001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT: VkStructureType =
    1000068000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT:
    VkStructureType = 1000068001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT:
    VkStructureType = 1000068002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000073000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000073001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR: VkStructureType =
    1000073002;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000073003;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR: VkStructureType = 1000074000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR: VkStructureType = 1000074001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR: VkStructureType = 1000074002;
pub const VkStructureType_VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR:
    VkStructureType = 1000075000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR:
    VkStructureType = 1000078000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR:
    VkStructureType = 1000078001;
pub const VkStructureType_VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR: VkStructureType =
    1000078002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000078003;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR: VkStructureType =
    1000079000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR: VkStructureType = 1000079001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR:
    VkStructureType = 1000080000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT : VkStructureType = 1000081000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT:
    VkStructureType = 1000081001;
pub const VkStructureType_VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT: VkStructureType =
    1000081002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR: VkStructureType = 1000084000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV:
    VkStructureType = 1000087000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT: VkStructureType =
    1000090000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT: VkStructureType = 1000091000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT: VkStructureType = 1000091001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT: VkStructureType = 1000091002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT: VkStructureType =
    1000091003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE: VkStructureType = 1000092000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX : VkStructureType = 1000097000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV:
    VkStructureType = 1000098000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT:
    VkStructureType = 1000099000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT:
    VkStructureType = 1000099001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT : VkStructureType = 1000101000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT : VkStructureType = 1000101001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT:
    VkStructureType = 1000102000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT : VkStructureType = 1000102001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_HDR_METADATA_EXT: VkStructureType = 1000105000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR:
    VkStructureType = 1000111000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000114000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000114001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000114002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR: VkStructureType = 1000115000;
pub const VkStructureType_VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR: VkStructureType = 1000115001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR:
    VkStructureType = 1000116000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR:
    VkStructureType = 1000116001;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR:
    VkStructureType = 1000116002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR: VkStructureType =
    1000116003;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR: VkStructureType =
    1000116004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR: VkStructureType = 1000116005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR: VkStructureType =
    1000116006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR: VkStructureType =
    1000119000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR: VkStructureType =
    1000119001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR: VkStructureType = 1000119002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR: VkStructureType = 1000121000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR: VkStructureType =
    1000121001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR: VkStructureType =
    1000121002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR: VkStructureType = 1000121003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR: VkStructureType =
    1000121004;
pub const VkStructureType_VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK: VkStructureType =
    1000122000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK: VkStructureType =
    1000123000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT: VkStructureType =
    1000128000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT: VkStructureType =
    1000128001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT: VkStructureType = 1000128002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT:
    VkStructureType = 1000128003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT: VkStructureType =
    1000128004;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID: VkStructureType =
    1000129000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID:
    VkStructureType = 1000129001;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID:
    VkStructureType = 1000129002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID:
    VkStructureType = 1000129003;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID:
    VkStructureType = 1000129004;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID: VkStructureType = 1000129005;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID:
    VkStructureType = 1000129006;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT: VkStructureType = 1000143000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT:
    VkStructureType = 1000143001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT:
    VkStructureType = 1000143002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT:
    VkStructureType = 1000143003;
pub const VkStructureType_VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT: VkStructureType =
    1000143004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT : VkStructureType = 1000148000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT : VkStructureType = 1000148001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT:
    VkStructureType = 1000148002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV:
    VkStructureType = 1000149000;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR:
    VkStructureType = 1000150007;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR:
    VkStructureType = 1000150000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR:
    VkStructureType = 1000150002;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR:
    VkStructureType = 1000150003;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR:
    VkStructureType = 1000150004;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR:
    VkStructureType = 1000150005;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR: VkStructureType =
    1000150006;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR:
    VkStructureType = 1000150009;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR: VkStructureType =
    1000150010;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR:
    VkStructureType = 1000150011;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR:
    VkStructureType = 1000150012;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR:
    VkStructureType = 1000150013;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR : VkStructureType = 1000150014 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR:
    VkStructureType = 1000150017;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR:
    VkStructureType = 1000150020;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR:
    VkStructureType = 1000347000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR:
    VkStructureType = 1000347001;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR: VkStructureType =
    1000150015;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR:
    VkStructureType = 1000150016;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR:
    VkStructureType = 1000150018;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR:
    VkStructureType = 1000348013;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV:
    VkStructureType = 1000152000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV:
    VkStructureType = 1000154000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV:
    VkStructureType = 1000154001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT:
    VkStructureType = 1000158000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT:
    VkStructureType = 1000158002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT:
    VkStructureType = 1000158003;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT:
    VkStructureType = 1000158004;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT:
    VkStructureType = 1000158005;
pub const VkStructureType_VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT:
    VkStructureType = 1000158006;
pub const VkStructureType_VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT: VkStructureType =
    1000160000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT:
    VkStructureType = 1000160001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV : VkStructureType = 1000164000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV:
    VkStructureType = 1000164001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV:
    VkStructureType = 1000164002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV : VkStructureType = 1000164005 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV: VkStructureType =
    1000165000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV: VkStructureType =
    1000165001;
pub const VkStructureType_VK_STRUCTURE_TYPE_GEOMETRY_NV: VkStructureType = 1000165003;
pub const VkStructureType_VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV: VkStructureType = 1000165004;
pub const VkStructureType_VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV: VkStructureType = 1000165005;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV:
    VkStructureType = 1000165006;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV:
    VkStructureType = 1000165007;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV:
    VkStructureType = 1000165008;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV:
    VkStructureType = 1000165009;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV:
    VkStructureType = 1000165011;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV: VkStructureType =
    1000165012;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV : VkStructureType = 1000166000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV : VkStructureType = 1000166001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT:
    VkStructureType = 1000170000;
pub const VkStructureType_VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT:
    VkStructureType = 1000170001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT: VkStructureType =
    1000178000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT: VkStructureType =
    1000178001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT:
    VkStructureType = 1000178002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR:
    VkStructureType = 1000181000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD:
    VkStructureType = 1000183000;
pub const VkStructureType_VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT: VkStructureType =
    1000184000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD:
    VkStructureType = 1000185000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR:
    VkStructureType = 1000174000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR:
    VkStructureType = 1000388000;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR:
    VkStructureType = 1000388001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD:
    VkStructureType = 1000189000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT : VkStructureType = 1000190000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT:
    VkStructureType = 1000190001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT : VkStructureType = 1000190002 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP: VkStructureType = 1000191000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV : VkStructureType = 1000201000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV:
    VkStructureType = 1000202000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV:
    VkStructureType = 1000202001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV:
    VkStructureType = 1000204000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV : VkStructureType = 1000205000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV:
    VkStructureType = 1000205002;
pub const VkStructureType_VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV: VkStructureType = 1000206000;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV: VkStructureType =
    1000206001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL : VkStructureType = 1000209000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL:
    VkStructureType = 1000210000;
pub const VkStructureType_VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL: VkStructureType =
    1000210001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL: VkStructureType =
    1000210002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL: VkStructureType =
    1000210003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL: VkStructureType =
    1000210004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL:
    VkStructureType = 1000210005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT:
    VkStructureType = 1000212000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD:
    VkStructureType = 1000213000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD:
    VkStructureType = 1000213001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA: VkStructureType =
    1000214000;
pub const VkStructureType_VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT: VkStructureType =
    1000217000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT:
    VkStructureType = 1000218000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT:
    VkStructureType = 1000218001;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT:
    VkStructureType = 1000218002;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR:
    VkStructureType = 1000226000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR:
    VkStructureType = 1000226001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR:
    VkStructureType = 1000226002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR:
    VkStructureType = 1000226003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR:
    VkStructureType = 1000226004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD:
    VkStructureType = 1000227000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD:
    VkStructureType = 1000229000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT : VkStructureType = 1000234000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT:
    VkStructureType = 1000237000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT:
    VkStructureType = 1000238000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT: VkStructureType =
    1000238001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR: VkStructureType =
    1000239000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV : VkStructureType = 1000240000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT:
    VkStructureType = 1000244000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT: VkStructureType =
    1000244002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT: VkStructureType = 1000247000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR:
    VkStructureType = 1000248000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV:
    VkStructureType = 1000249000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV: VkStructureType =
    1000249001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV:
    VkStructureType = 1000249002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV:
    VkStructureType = 1000250000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV:
    VkStructureType = 1000250001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV:
    VkStructureType = 1000250002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT : VkStructureType = 1000251000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT:
    VkStructureType = 1000252000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT:
    VkStructureType = 1000254000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT : VkStructureType = 1000254001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT:
    VkStructureType = 1000254002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT:
    VkStructureType = 1000255000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT:
    VkStructureType = 1000255002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT:
    VkStructureType = 1000255001;
pub const VkStructureType_VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT: VkStructureType =
    1000256000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT:
    VkStructureType = 1000259000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT:
    VkStructureType = 1000259001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT:
    VkStructureType = 1000259002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT:
    VkStructureType = 1000260000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT:
    VkStructureType = 1000265000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT:
    VkStructureType = 1000267000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR : VkStructureType = 1000269000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR: VkStructureType = 1000269001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR: VkStructureType =
    1000269002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR: VkStructureType =
    1000269003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR: VkStructureType =
    1000269004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR:
    VkStructureType = 1000269005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT:
    VkStructureType = 1000273000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV : VkStructureType = 1000277000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV: VkStructureType =
    1000277001;
pub const VkStructureType_VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV:
    VkStructureType = 1000277002;
pub const VkStructureType_VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV: VkStructureType =
    1000277003;
pub const VkStructureType_VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV:
    VkStructureType = 1000277004;
pub const VkStructureType_VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV: VkStructureType =
    1000277005;
pub const VkStructureType_VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV:
    VkStructureType = 1000277006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV : VkStructureType = 1000277007 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV : VkStructureType = 1000278000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV:
    VkStructureType = 1000278001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT:
    VkStructureType = 1000281000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM : VkStructureType = 1000282000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM: VkStructureType =
    1000282001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT:
    VkStructureType = 1000284000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT:
    VkStructureType = 1000284001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT:
    VkStructureType = 1000284002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT:
    VkStructureType = 1000286000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT:
    VkStructureType = 1000286001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT:
    VkStructureType = 1000287000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT:
    VkStructureType = 1000287001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT:
    VkStructureType = 1000287002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR: VkStructureType =
    1000290000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV:
    VkStructureType = 1000292000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV:
    VkStructureType = 1000292001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV:
    VkStructureType = 1000292002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRESENT_ID_KHR: VkStructureType = 1000294000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR:
    VkStructureType = 1000294001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV:
    VkStructureType = 1000300000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV:
    VkStructureType = 1000300001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT: VkStructureType =
    1000311000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT: VkStructureType =
    1000311001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT: VkStructureType =
    1000311002;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT: VkStructureType =
    1000311003;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT: VkStructureType =
    1000311004;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT: VkStructureType =
    1000311005;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT: VkStructureType =
    1000311006;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT: VkStructureType =
    1000311007;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT: VkStructureType =
    1000311008;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT: VkStructureType =
    1000311009;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT: VkStructureType =
    1000311010;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT: VkStructureType =
    1000311011;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV:
    VkStructureType = 1000314008;
pub const VkStructureType_VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV: VkStructureType = 1000314009;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT : VkStructureType = 1000320000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT : VkStructureType = 1000320001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT:
    VkStructureType = 1000320002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD : VkStructureType = 1000321000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR : VkStructureType = 1000203000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR : VkStructureType = 1000322000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR : VkStructureType = 1000323000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV : VkStructureType = 1000326000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV : VkStructureType = 1000326001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV : VkStructureType = 1000326002 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV : VkStructureType = 1000327000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV:
    VkStructureType = 1000327001;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV: VkStructureType =
    1000327002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT:
    VkStructureType = 1000328000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT:
    VkStructureType = 1000328001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT : VkStructureType = 1000330000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT:
    VkStructureType = 1000332000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT : VkStructureType = 1000332001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM: VkStructureType =
    1000333000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR : VkStructureType = 1000336000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT : VkStructureType = 1000338000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT: VkStructureType =
    1000338001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT: VkStructureType = 1000338002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT: VkStructureType = 1000338003;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT: VkStructureType =
    1000338004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT : VkStructureType = 1000339000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT:
    VkStructureType = 1000340000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT: VkStructureType =
    1000341000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT: VkStructureType = 1000341001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT: VkStructureType = 1000341002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT:
    VkStructureType = 1000344000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT: VkStructureType =
    1000346000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT : VkStructureType = 1000352000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT:
    VkStructureType = 1000352001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT:
    VkStructureType = 1000352002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT: VkStructureType =
    1000353000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT:
    VkStructureType = 1000354000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT:
    VkStructureType = 1000354001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT:
    VkStructureType = 1000355000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT:
    VkStructureType = 1000355001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT : VkStructureType = 1000356000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA:
    VkStructureType = 1000364000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA:
    VkStructureType = 1000364001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA: VkStructureType =
    1000364002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA:
    VkStructureType = 1000365000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA:
    VkStructureType = 1000365001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA: VkStructureType =
    1000366000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA:
    VkStructureType = 1000366001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA:
    VkStructureType = 1000366002;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA: VkStructureType =
    1000366003;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA: VkStructureType =
    1000366004;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA:
    VkStructureType = 1000366005;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA: VkStructureType =
    1000366006;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA: VkStructureType =
    1000366007;
pub const VkStructureType_VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA: VkStructureType =
    1000366008;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA:
    VkStructureType = 1000366009;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI:
    VkStructureType = 1000369000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI:
    VkStructureType = 1000369001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI:
    VkStructureType = 1000369002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI:
    VkStructureType = 1000370000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV: VkStructureType =
    1000371000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV:
    VkStructureType = 1000371001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT: VkStructureType =
    1000372000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT:
    VkStructureType = 1000372001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT : VkStructureType = 1000376000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT: VkStructureType =
    1000376001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT:
    VkStructureType = 1000376002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT : VkStructureType = 1000377000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX: VkStructureType =
    1000378000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT:
    VkStructureType = 1000381000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT: VkStructureType =
    1000381001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT : VkStructureType = 1000382000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR : VkStructureType = 1000386000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT:
    VkStructureType = 1000391000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT: VkStructureType =
    1000391001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT:
    VkStructureType = 1000392000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT:
    VkStructureType = 1000392001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT:
    VkStructureType = 1000393000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT: VkStructureType = 1000396000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT: VkStructureType = 1000396001;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT: VkStructureType = 1000396002;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT: VkStructureType =
    1000396003;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT: VkStructureType =
    1000396004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT:
    VkStructureType = 1000396005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT:
    VkStructureType = 1000396006;
pub const VkStructureType_VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT: VkStructureType = 1000396007;
pub const VkStructureType_VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT: VkStructureType =
    1000396008;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT : VkStructureType = 1000396009 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT:
    VkStructureType = 1000411000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT : VkStructureType = 1000411001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT : VkStructureType = 1000412000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE : VkStructureType = 1000420000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE:
    VkStructureType = 1000420001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE:
    VkStructureType = 1000420002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT:
    VkStructureType = 1000421000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT:
    VkStructureType = 1000422000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM : VkStructureType = 1000425000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM : VkStructureType = 1000425001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM:
    VkStructureType = 1000425002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV:
    VkStructureType = 1000430000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT : VkStructureType = 1000437000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM:
    VkStructureType = 1000440000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM:
    VkStructureType = 1000440001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM:
    VkStructureType = 1000440002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT : VkStructureType = 1000455000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT : VkStructureType = 1000455001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT:
    VkStructureType = 1000458000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT: VkStructureType =
    1000458001;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT:
    VkStructureType = 1000458002;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT:
    VkStructureType = 1000458003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT : VkStructureType = 1000462000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT : VkStructureType = 1000462001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT : VkStructureType = 1000462002 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT: VkStructureType =
    1000462003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT : VkStructureType = 1000342000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV:
    VkStructureType = 1000464000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV:
    VkStructureType = 1000464001;
pub const VkStructureType_VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV: VkStructureType =
    1000464002;
pub const VkStructureType_VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV:
    VkStructureType = 1000464003;
pub const VkStructureType_VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV: VkStructureType =
    1000464004;
pub const VkStructureType_VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV: VkStructureType =
    1000464005;
pub const VkStructureType_VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV:
    VkStructureType = 1000464010;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT:
    VkStructureType = 1000465000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT : VkStructureType = 1000466000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM:
    VkStructureType = 1000484000;
pub const VkStructureType_VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM: VkStructureType = 1000484001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC:
    VkStructureType = 1000485000;
pub const VkStructureType_VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC: VkStructureType =
    1000485001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT:
    VkStructureType = 1000351000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT:
    VkStructureType = 1000351002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM:
    VkStructureType = 1000497000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM:
    VkStructureType = 1000497001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES:
    VkStructureType = 1000120000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES:
    VkStructureType = 1000063000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT: VkStructureType =
    1000011000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_INFO_KHR: VkStructureType = 1000044000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR: VkStructureType =
    1000044001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR: VkStructureType =
    1000044002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR:
    VkStructureType = 1000044003;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR:
    VkStructureType = 1000044004;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV: VkStructureType =
    1000044008;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR: VkStructureType =
    1000053000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR:
    VkStructureType = 1000053001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR:
    VkStructureType = 1000053002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR: VkStructureType =
    1000059000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR: VkStructureType =
    1000059001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR: VkStructureType = 1000059002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR: VkStructureType =
    1000059003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR:
    VkStructureType = 1000059004;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR: VkStructureType =
    1000059005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR:
    VkStructureType = 1000059006;
pub const VkStructureType_VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR: VkStructureType =
    1000059007;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR:
    VkStructureType = 1000059008;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR: VkStructureType =
    1000060000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR:
    VkStructureType = 1000060003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR:
    VkStructureType = 1000060004;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR: VkStructureType =
    1000060005;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR: VkStructureType =
    1000060006;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR:
    VkStructureType = 1000060013;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR:
    VkStructureType = 1000060014;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT : VkStructureType = 1000066000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR: VkStructureType =
    1000070000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR: VkStructureType =
    1000070001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR:
    VkStructureType = 1000071000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR: VkStructureType =
    1000071001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR:
    VkStructureType = 1000071002;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR: VkStructureType =
    1000071003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR: VkStructureType =
    1000071004;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR:
    VkStructureType = 1000072000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR: VkStructureType =
    1000072001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR: VkStructureType =
    1000072002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR:
    VkStructureType = 1000076000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR: VkStructureType =
    1000076001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR: VkStructureType =
    1000077000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR:
    VkStructureType = 1000082000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR:
    VkStructureType = 1000082000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR:
    VkStructureType = 1000083000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR:
    VkStructureType = 1000085000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT: VkStructureType = 1000090000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR:
    VkStructureType = 1000108000;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR:
    VkStructureType = 1000108001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR: VkStructureType =
    1000108002;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR: VkStructureType =
    1000108003;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR: VkStructureType =
    1000109000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR: VkStructureType =
    1000109001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR: VkStructureType = 1000109002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR: VkStructureType = 1000109003;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR: VkStructureType =
    1000109004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR: VkStructureType = 1000109005;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR: VkStructureType = 1000109006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR:
    VkStructureType = 1000112000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR: VkStructureType =
    1000112001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR: VkStructureType =
    1000113000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR:
    VkStructureType = 1000117000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR:
    VkStructureType = 1000117001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR: VkStructureType =
    1000117002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR : VkStructureType = 1000117003 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR:
    VkStructureType = 1000120000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR:
    VkStructureType = 1000120000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR: VkStructureType =
    1000127000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR: VkStructureType =
    1000127001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT:
    VkStructureType = 1000130000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT:
    VkStructureType = 1000130001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT:
    VkStructureType = 1000138000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT:
    VkStructureType = 1000138001;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT:
    VkStructureType = 1000138002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT:
    VkStructureType = 1000138003;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR: VkStructureType =
    1000146000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR: VkStructureType =
    1000146001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR:
    VkStructureType = 1000146002;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR: VkStructureType = 1000146003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR:
    VkStructureType = 1000146004;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR: VkStructureType =
    1000147000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR:
    VkStructureType = 1000156000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR: VkStructureType =
    1000156001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR: VkStructureType =
    1000156002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR:
    VkStructureType = 1000156003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR : VkStructureType = 1000156004 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR:
    VkStructureType = 1000156005;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR: VkStructureType =
    1000157000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR: VkStructureType =
    1000157001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT:
    VkStructureType = 1000161000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT:
    VkStructureType = 1000161001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT:
    VkStructureType = 1000161002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT : VkStructureType = 1000161003 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT : VkStructureType = 1000161004 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR:
    VkStructureType = 1000168000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR: VkStructureType =
    1000168001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT:
    VkStructureType = 1000174000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR : VkStructureType = 1000175000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR:
    VkStructureType = 1000177000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR:
    VkStructureType = 1000180000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT:
    VkStructureType = 1000192000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR: VkStructureType =
    1000196000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR:
    VkStructureType = 1000197000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR:
    VkStructureType = 1000199000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR:
    VkStructureType = 1000199001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV : VkStructureType = 1000203000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR:
    VkStructureType = 1000207000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR:
    VkStructureType = 1000207001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR: VkStructureType =
    1000207002;
pub const VkStructureType_VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR: VkStructureType =
    1000207003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR: VkStructureType = 1000207004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR: VkStructureType = 1000207005;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL: VkStructureType =
    1000210000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR:
    VkStructureType = 1000211000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR : VkStructureType = 1000215000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT:
    VkStructureType = 1000221000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT:
    VkStructureType = 1000225000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT : VkStructureType = 1000225001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT:
    VkStructureType = 1000225002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR : VkStructureType = 1000241000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR:
    VkStructureType = 1000241001;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR:
    VkStructureType = 1000241002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT:
    VkStructureType = 1000244000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT: VkStructureType =
    1000244001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT: VkStructureType =
    1000245000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT: VkStructureType =
    1000246000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR : VkStructureType = 1000253000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR:
    VkStructureType = 1000257000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR: VkStructureType =
    1000244001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR:
    VkStructureType = 1000257002;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR:
    VkStructureType = 1000257003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR:
    VkStructureType = 1000257004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT:
    VkStructureType = 1000261000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT : VkStructureType = 1000276000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR : VkStructureType = 1000280000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR : VkStructureType = 1000280001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT : VkStructureType = 1000281001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT:
    VkStructureType = 1000295000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT: VkStructureType =
    1000295001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT: VkStructureType =
    1000295002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT : VkStructureType = 1000297000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR: VkStructureType = 1000314000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR: VkStructureType =
    1000314001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR: VkStructureType =
    1000314002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR: VkStructureType = 1000314003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR: VkStructureType = 1000314004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR: VkStructureType = 1000314005;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR: VkStructureType =
    1000314006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR:
    VkStructureType = 1000314007;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR : VkStructureType = 1000325000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT:
    VkStructureType = 1000335000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR: VkStructureType = 1000337000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR: VkStructureType = 1000337001;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR: VkStructureType =
    1000337002;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR: VkStructureType =
    1000337003;
pub const VkStructureType_VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR: VkStructureType = 1000337004;
pub const VkStructureType_VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR: VkStructureType = 1000337005;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR: VkStructureType = 1000337006;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR: VkStructureType = 1000337007;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR: VkStructureType = 1000337008;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR: VkStructureType = 1000337009;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR: VkStructureType = 1000337010;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM : VkStructureType = 1000342000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE : VkStructureType = 1000351000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE:
    VkStructureType = 1000351002;
pub const VkStructureType_VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR: VkStructureType = 1000360000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT: VkStructureType = 1000269001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT:
    VkStructureType = 1000388000;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT:
    VkStructureType = 1000388001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR:
    VkStructureType = 1000413000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR:
    VkStructureType = 1000413001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR: VkStructureType =
    1000413002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR: VkStructureType =
    1000413003;
pub const VkStructureType_VK_STRUCTURE_TYPE_MAX_ENUM: VkStructureType = 2147483647;
pub type VkStructureType = ::std::os::raw::c_int;
pub type VkAccessFlags = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryBarrier {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcAccessMask: VkAccessFlags,
    pub dstAccessMask: VkAccessFlags,
}
#[test]
fn bindgen_test_layout_VkMemoryBarrier() {
    assert_eq!(
        ::std::mem::size_of::<VkMemoryBarrier>(),
        24usize,
        concat!("Size of: ", stringify!(VkMemoryBarrier))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryBarrier>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryBarrier))
    );
    fn test_field_sType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkMemoryBarrier>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VkMemoryBarrier),
                "::",
                stringify!(sType)
            )
        );
    }
    test_field_sType();
    fn test_field_pNext() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkMemoryBarrier>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VkMemoryBarrier),
                "::",
                stringify!(pNext)
            )
        );
    }
    test_field_pNext();
    fn test_field_srcAccessMask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkMemoryBarrier>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).srcAccessMask) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VkMemoryBarrier),
                "::",
                stringify!(srcAccessMask)
            )
        );
    }
    test_field_srcAccessMask();
    fn test_field_dstAccessMask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkMemoryBarrier>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dstAccessMask) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VkMemoryBarrier),
                "::",
                stringify!(dstAccessMask)
            )
        );
    }
    test_field_dstAccessMask();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFFTConfiguration {
    pub FFTdim: u64,
    pub size: [u64; 3usize],
    pub physicalDevice: *mut VkPhysicalDevice,
    pub device: *mut VkDevice,
    pub queue: *mut VkQueue,
    pub commandPool: *mut VkCommandPool,
    pub fence: *mut VkFence,
    pub isCompilerInitialized: u64,
    pub userTempBuffer: u64,
    pub bufferNum: u64,
    pub tempBufferNum: u64,
    pub inputBufferNum: u64,
    pub outputBufferNum: u64,
    pub kernelNum: u64,
    pub bufferSize: *mut u64,
    pub tempBufferSize: *mut u64,
    pub inputBufferSize: *mut u64,
    pub outputBufferSize: *mut u64,
    pub kernelSize: *mut u64,
    pub buffer: *mut VkBuffer,
    pub tempBuffer: *mut VkBuffer,
    pub inputBuffer: *mut VkBuffer,
    pub outputBuffer: *mut VkBuffer,
    pub kernel: *mut VkBuffer,
    pub bufferOffset: u64,
    pub tempBufferOffset: u64,
    pub inputBufferOffset: u64,
    pub outputBufferOffset: u64,
    pub kernelOffset: u64,
    pub specifyOffsetsAtLaunch: u64,
    pub pipelineCache: *mut VkPipelineCache,
    pub coalescedMemory: u64,
    pub aimThreads: u64,
    pub numSharedBanks: u64,
    pub inverseReturnToInputBuffer: u64,
    pub numberBatches: u64,
    pub useUint64: u64,
    pub omitDimension: [u64; 3usize],
    pub performBandwidthBoost: u64,
    pub doublePrecision: u64,
    pub halfPrecision: u64,
    pub halfPrecisionMemoryOnly: u64,
    pub doublePrecisionFloatMemory: u64,
    pub performR2C: u64,
    pub performDCT: u64,
    pub disableMergeSequencesR2C: u64,
    pub normalize: u64,
    pub disableReorderFourStep: u64,
    pub useLUT: i64,
    pub useLUT_4step: i64,
    pub makeForwardPlanOnly: u64,
    pub makeInversePlanOnly: u64,
    pub bufferStride: [u64; 3usize],
    pub isInputFormatted: u64,
    pub isOutputFormatted: u64,
    pub inputBufferStride: [u64; 3usize],
    pub outputBufferStride: [u64; 3usize],
    pub considerAllAxesStrided: u64,
    pub keepShaderCode: u64,
    pub printMemoryLayout: u64,
    pub saveApplicationToString: u64,
    pub loadApplicationFromString: u64,
    pub loadApplicationString: *mut ::std::os::raw::c_void,
    pub disableSetLocale: u64,
    pub fixMaxRadixBluestein: u64,
    pub forceBluesteinSequenceSize: u64,
    pub useCustomBluesteinPaddingPattern: u64,
    pub primeSizes: *mut u64,
    pub paddedSizes: *mut u64,
    pub fixMinRaderPrimeMult: u64,
    pub fixMaxRaderPrimeMult: u64,
    pub fixMinRaderPrimeFFT: u64,
    pub fixMaxRaderPrimeFFT: u64,
    pub performZeropadding: [u64; 3usize],
    pub fft_zeropad_left: [u64; 3usize],
    pub fft_zeropad_right: [u64; 3usize],
    pub frequencyZeroPadding: u64,
    pub performConvolution: u64,
    pub conjugateConvolution: u64,
    pub crossPowerSpectrumNormalization: u64,
    pub coordinateFeatures: u64,
    pub matrixConvolution: u64,
    pub symmetricKernel: u64,
    pub numberKernels: u64,
    pub kernelConvolution: u64,
    pub registerBoost: u64,
    pub registerBoostNonPow2: u64,
    pub registerBoost4Step: u64,
    pub swapTo3Stage4Step: u64,
    pub devicePageSize: u64,
    pub localPageSize: u64,
    pub computeCapabilityMajor: u64,
    pub computeCapabilityMinor: u64,
    pub maxComputeWorkGroupCount: [u64; 3usize],
    pub maxComputeWorkGroupSize: [u64; 3usize],
    pub maxThreadsNum: u64,
    pub sharedMemorySizeStatic: u64,
    pub sharedMemorySize: u64,
    pub sharedMemorySizePow2: u64,
    pub warpSize: u64,
    pub halfThreads: u64,
    pub allocateTempBuffer: u64,
    pub reorderFourStep: u64,
    pub maxCodeLength: i64,
    pub maxTempLength: i64,
    pub autoCustomBluesteinPaddingPattern: u64,
    pub useRaderUintLUT: u64,
    pub vendorID: u64,
    pub tempBufferDeviceMemory: VkDeviceMemory,
    pub commandBuffer: *mut VkCommandBuffer,
    pub memory_barrier: *mut VkMemoryBarrier,
}
#[test]
fn bindgen_test_layout_VkFFTConfiguration() {
    assert_eq!(
        ::std::mem::size_of::<VkFFTConfiguration>(),
        1048usize,
        concat!("Size of: ", stringify!(VkFFTConfiguration))
    );
    assert_eq!(
        ::std::mem::align_of::<VkFFTConfiguration>(),
        8usize,
        concat!("Alignment of ", stringify!(VkFFTConfiguration))
    );
    fn test_field_FFTdim() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FFTdim) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(FFTdim)
            )
        );
    }
    test_field_FFTdim();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_physicalDevice() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).physicalDevice) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(physicalDevice)
            )
        );
    }
    test_field_physicalDevice();
    fn test_field_device() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(device)
            )
        );
    }
    test_field_device();
    fn test_field_queue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).queue) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(queue)
            )
        );
    }
    test_field_queue();
    fn test_field_commandPool() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).commandPool) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(commandPool)
            )
        );
    }
    test_field_commandPool();
    fn test_field_fence() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fence) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(fence)
            )
        );
    }
    test_field_fence();
    fn test_field_isCompilerInitialized() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).isCompilerInitialized) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(isCompilerInitialized)
            )
        );
    }
    test_field_isCompilerInitialized();
    fn test_field_userTempBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).userTempBuffer) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(userTempBuffer)
            )
        );
    }
    test_field_userTempBuffer();
    fn test_field_bufferNum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferNum) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(bufferNum)
            )
        );
    }
    test_field_bufferNum();
    fn test_field_tempBufferNum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tempBufferNum) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(tempBufferNum)
            )
        );
    }
    test_field_tempBufferNum();
    fn test_field_inputBufferNum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inputBufferNum) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(inputBufferNum)
            )
        );
    }
    test_field_inputBufferNum();
    fn test_field_outputBufferNum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).outputBufferNum) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(outputBufferNum)
            )
        );
    }
    test_field_outputBufferNum();
    fn test_field_kernelNum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).kernelNum) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(kernelNum)
            )
        );
    }
    test_field_kernelNum();
    fn test_field_bufferSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferSize) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(bufferSize)
            )
        );
    }
    test_field_bufferSize();
    fn test_field_tempBufferSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tempBufferSize) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(tempBufferSize)
            )
        );
    }
    test_field_tempBufferSize();
    fn test_field_inputBufferSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inputBufferSize) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(inputBufferSize)
            )
        );
    }
    test_field_inputBufferSize();
    fn test_field_outputBufferSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).outputBufferSize) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(outputBufferSize)
            )
        );
    }
    test_field_outputBufferSize();
    fn test_field_kernelSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).kernelSize) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(kernelSize)
            )
        );
    }
    test_field_kernelSize();
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
    fn test_field_tempBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tempBuffer) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(tempBuffer)
            )
        );
    }
    test_field_tempBuffer();
    fn test_field_inputBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inputBuffer) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(inputBuffer)
            )
        );
    }
    test_field_inputBuffer();
    fn test_field_outputBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).outputBuffer) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(outputBuffer)
            )
        );
    }
    test_field_outputBuffer();
    fn test_field_kernel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).kernel) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(kernel)
            )
        );
    }
    test_field_kernel();
    fn test_field_bufferOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferOffset) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(bufferOffset)
            )
        );
    }
    test_field_bufferOffset();
    fn test_field_tempBufferOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tempBufferOffset) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(tempBufferOffset)
            )
        );
    }
    test_field_tempBufferOffset();
    fn test_field_inputBufferOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inputBufferOffset) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(inputBufferOffset)
            )
        );
    }
    test_field_inputBufferOffset();
    fn test_field_outputBufferOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).outputBufferOffset) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(outputBufferOffset)
            )
        );
    }
    test_field_outputBufferOffset();
    fn test_field_kernelOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).kernelOffset) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(kernelOffset)
            )
        );
    }
    test_field_kernelOffset();
    fn test_field_specifyOffsetsAtLaunch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).specifyOffsetsAtLaunch) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(specifyOffsetsAtLaunch)
            )
        );
    }
    test_field_specifyOffsetsAtLaunch();
    fn test_field_pipelineCache() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pipelineCache) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(pipelineCache)
            )
        );
    }
    test_field_pipelineCache();
    fn test_field_coalescedMemory() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).coalescedMemory) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(coalescedMemory)
            )
        );
    }
    test_field_coalescedMemory();
    fn test_field_aimThreads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).aimThreads) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(aimThreads)
            )
        );
    }
    test_field_aimThreads();
    fn test_field_numSharedBanks() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numSharedBanks) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(numSharedBanks)
            )
        );
    }
    test_field_numSharedBanks();
    fn test_field_inverseReturnToInputBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inverseReturnToInputBuffer) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(inverseReturnToInputBuffer)
            )
        );
    }
    test_field_inverseReturnToInputBuffer();
    fn test_field_numberBatches() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numberBatches) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(numberBatches)
            )
        );
    }
    test_field_numberBatches();
    fn test_field_useUint64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).useUint64) as usize - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(useUint64)
            )
        );
    }
    test_field_useUint64();
    fn test_field_omitDimension() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).omitDimension) as usize - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(omitDimension)
            )
        );
    }
    test_field_omitDimension();
    fn test_field_performBandwidthBoost() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).performBandwidthBoost) as usize - ptr as usize
            },
            336usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(performBandwidthBoost)
            )
        );
    }
    test_field_performBandwidthBoost();
    fn test_field_doublePrecision() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).doublePrecision) as usize - ptr as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(doublePrecision)
            )
        );
    }
    test_field_doublePrecision();
    fn test_field_halfPrecision() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).halfPrecision) as usize - ptr as usize
            },
            352usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(halfPrecision)
            )
        );
    }
    test_field_halfPrecision();
    fn test_field_halfPrecisionMemoryOnly() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).halfPrecisionMemoryOnly) as usize - ptr as usize
            },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(halfPrecisionMemoryOnly)
            )
        );
    }
    test_field_halfPrecisionMemoryOnly();
    fn test_field_doublePrecisionFloatMemory() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).doublePrecisionFloatMemory) as usize - ptr as usize
            },
            368usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(doublePrecisionFloatMemory)
            )
        );
    }
    test_field_doublePrecisionFloatMemory();
    fn test_field_performR2C() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).performR2C) as usize - ptr as usize
            },
            376usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(performR2C)
            )
        );
    }
    test_field_performR2C();
    fn test_field_performDCT() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).performDCT) as usize - ptr as usize
            },
            384usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(performDCT)
            )
        );
    }
    test_field_performDCT();
    fn test_field_disableMergeSequencesR2C() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).disableMergeSequencesR2C) as usize - ptr as usize
            },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(disableMergeSequencesR2C)
            )
        );
    }
    test_field_disableMergeSequencesR2C();
    fn test_field_normalize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).normalize) as usize - ptr as usize
            },
            400usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(normalize)
            )
        );
    }
    test_field_normalize();
    fn test_field_disableReorderFourStep() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).disableReorderFourStep) as usize - ptr as usize
            },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(disableReorderFourStep)
            )
        );
    }
    test_field_disableReorderFourStep();
    fn test_field_useLUT() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).useLUT) as usize - ptr as usize
            },
            416usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(useLUT)
            )
        );
    }
    test_field_useLUT();
    fn test_field_useLUT_4step() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).useLUT_4step) as usize - ptr as usize
            },
            424usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(useLUT_4step)
            )
        );
    }
    test_field_useLUT_4step();
    fn test_field_makeForwardPlanOnly() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).makeForwardPlanOnly) as usize - ptr as usize
            },
            432usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(makeForwardPlanOnly)
            )
        );
    }
    test_field_makeForwardPlanOnly();
    fn test_field_makeInversePlanOnly() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).makeInversePlanOnly) as usize - ptr as usize
            },
            440usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(makeInversePlanOnly)
            )
        );
    }
    test_field_makeInversePlanOnly();
    fn test_field_bufferStride() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferStride) as usize - ptr as usize
            },
            448usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(bufferStride)
            )
        );
    }
    test_field_bufferStride();
    fn test_field_isInputFormatted() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).isInputFormatted) as usize - ptr as usize
            },
            472usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(isInputFormatted)
            )
        );
    }
    test_field_isInputFormatted();
    fn test_field_isOutputFormatted() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).isOutputFormatted) as usize - ptr as usize
            },
            480usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(isOutputFormatted)
            )
        );
    }
    test_field_isOutputFormatted();
    fn test_field_inputBufferStride() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inputBufferStride) as usize - ptr as usize
            },
            488usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(inputBufferStride)
            )
        );
    }
    test_field_inputBufferStride();
    fn test_field_outputBufferStride() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).outputBufferStride) as usize - ptr as usize
            },
            512usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(outputBufferStride)
            )
        );
    }
    test_field_outputBufferStride();
    fn test_field_considerAllAxesStrided() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).considerAllAxesStrided) as usize - ptr as usize
            },
            536usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(considerAllAxesStrided)
            )
        );
    }
    test_field_considerAllAxesStrided();
    fn test_field_keepShaderCode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).keepShaderCode) as usize - ptr as usize
            },
            544usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(keepShaderCode)
            )
        );
    }
    test_field_keepShaderCode();
    fn test_field_printMemoryLayout() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).printMemoryLayout) as usize - ptr as usize
            },
            552usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(printMemoryLayout)
            )
        );
    }
    test_field_printMemoryLayout();
    fn test_field_saveApplicationToString() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).saveApplicationToString) as usize - ptr as usize
            },
            560usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(saveApplicationToString)
            )
        );
    }
    test_field_saveApplicationToString();
    fn test_field_loadApplicationFromString() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).loadApplicationFromString) as usize - ptr as usize
            },
            568usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(loadApplicationFromString)
            )
        );
    }
    test_field_loadApplicationFromString();
    fn test_field_loadApplicationString() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).loadApplicationString) as usize - ptr as usize
            },
            576usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(loadApplicationString)
            )
        );
    }
    test_field_loadApplicationString();
    fn test_field_disableSetLocale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).disableSetLocale) as usize - ptr as usize
            },
            584usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(disableSetLocale)
            )
        );
    }
    test_field_disableSetLocale();
    fn test_field_fixMaxRadixBluestein() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fixMaxRadixBluestein) as usize - ptr as usize
            },
            592usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(fixMaxRadixBluestein)
            )
        );
    }
    test_field_fixMaxRadixBluestein();
    fn test_field_forceBluesteinSequenceSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).forceBluesteinSequenceSize) as usize - ptr as usize
            },
            600usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(forceBluesteinSequenceSize)
            )
        );
    }
    test_field_forceBluesteinSequenceSize();
    fn test_field_useCustomBluesteinPaddingPattern() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).useCustomBluesteinPaddingPattern) as usize
                    - ptr as usize
            },
            608usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(useCustomBluesteinPaddingPattern)
            )
        );
    }
    test_field_useCustomBluesteinPaddingPattern();
    fn test_field_primeSizes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).primeSizes) as usize - ptr as usize
            },
            616usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(primeSizes)
            )
        );
    }
    test_field_primeSizes();
    fn test_field_paddedSizes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).paddedSizes) as usize - ptr as usize
            },
            624usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(paddedSizes)
            )
        );
    }
    test_field_paddedSizes();
    fn test_field_fixMinRaderPrimeMult() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fixMinRaderPrimeMult) as usize - ptr as usize
            },
            632usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(fixMinRaderPrimeMult)
            )
        );
    }
    test_field_fixMinRaderPrimeMult();
    fn test_field_fixMaxRaderPrimeMult() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fixMaxRaderPrimeMult) as usize - ptr as usize
            },
            640usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(fixMaxRaderPrimeMult)
            )
        );
    }
    test_field_fixMaxRaderPrimeMult();
    fn test_field_fixMinRaderPrimeFFT() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fixMinRaderPrimeFFT) as usize - ptr as usize
            },
            648usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(fixMinRaderPrimeFFT)
            )
        );
    }
    test_field_fixMinRaderPrimeFFT();
    fn test_field_fixMaxRaderPrimeFFT() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fixMaxRaderPrimeFFT) as usize - ptr as usize
            },
            656usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(fixMaxRaderPrimeFFT)
            )
        );
    }
    test_field_fixMaxRaderPrimeFFT();
    fn test_field_performZeropadding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).performZeropadding) as usize - ptr as usize
            },
            664usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(performZeropadding)
            )
        );
    }
    test_field_performZeropadding();
    fn test_field_fft_zeropad_left() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fft_zeropad_left) as usize - ptr as usize
            },
            688usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(fft_zeropad_left)
            )
        );
    }
    test_field_fft_zeropad_left();
    fn test_field_fft_zeropad_right() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fft_zeropad_right) as usize - ptr as usize
            },
            712usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(fft_zeropad_right)
            )
        );
    }
    test_field_fft_zeropad_right();
    fn test_field_frequencyZeroPadding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).frequencyZeroPadding) as usize - ptr as usize
            },
            736usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(frequencyZeroPadding)
            )
        );
    }
    test_field_frequencyZeroPadding();
    fn test_field_performConvolution() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).performConvolution) as usize - ptr as usize
            },
            744usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(performConvolution)
            )
        );
    }
    test_field_performConvolution();
    fn test_field_conjugateConvolution() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).conjugateConvolution) as usize - ptr as usize
            },
            752usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(conjugateConvolution)
            )
        );
    }
    test_field_conjugateConvolution();
    fn test_field_crossPowerSpectrumNormalization() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).crossPowerSpectrumNormalization) as usize - ptr as usize
            },
            760usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(crossPowerSpectrumNormalization)
            )
        );
    }
    test_field_crossPowerSpectrumNormalization();
    fn test_field_coordinateFeatures() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).coordinateFeatures) as usize - ptr as usize
            },
            768usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(coordinateFeatures)
            )
        );
    }
    test_field_coordinateFeatures();
    fn test_field_matrixConvolution() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).matrixConvolution) as usize - ptr as usize
            },
            776usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(matrixConvolution)
            )
        );
    }
    test_field_matrixConvolution();
    fn test_field_symmetricKernel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).symmetricKernel) as usize - ptr as usize
            },
            784usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(symmetricKernel)
            )
        );
    }
    test_field_symmetricKernel();
    fn test_field_numberKernels() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numberKernels) as usize - ptr as usize
            },
            792usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(numberKernels)
            )
        );
    }
    test_field_numberKernels();
    fn test_field_kernelConvolution() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).kernelConvolution) as usize - ptr as usize
            },
            800usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(kernelConvolution)
            )
        );
    }
    test_field_kernelConvolution();
    fn test_field_registerBoost() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).registerBoost) as usize - ptr as usize
            },
            808usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(registerBoost)
            )
        );
    }
    test_field_registerBoost();
    fn test_field_registerBoostNonPow2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).registerBoostNonPow2) as usize - ptr as usize
            },
            816usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(registerBoostNonPow2)
            )
        );
    }
    test_field_registerBoostNonPow2();
    fn test_field_registerBoost4Step() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).registerBoost4Step) as usize - ptr as usize
            },
            824usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(registerBoost4Step)
            )
        );
    }
    test_field_registerBoost4Step();
    fn test_field_swapTo3Stage4Step() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).swapTo3Stage4Step) as usize - ptr as usize
            },
            832usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(swapTo3Stage4Step)
            )
        );
    }
    test_field_swapTo3Stage4Step();
    fn test_field_devicePageSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).devicePageSize) as usize - ptr as usize
            },
            840usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(devicePageSize)
            )
        );
    }
    test_field_devicePageSize();
    fn test_field_localPageSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).localPageSize) as usize - ptr as usize
            },
            848usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(localPageSize)
            )
        );
    }
    test_field_localPageSize();
    fn test_field_computeCapabilityMajor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).computeCapabilityMajor) as usize - ptr as usize
            },
            856usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(computeCapabilityMajor)
            )
        );
    }
    test_field_computeCapabilityMajor();
    fn test_field_computeCapabilityMinor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).computeCapabilityMinor) as usize - ptr as usize
            },
            864usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(computeCapabilityMinor)
            )
        );
    }
    test_field_computeCapabilityMinor();
    fn test_field_maxComputeWorkGroupCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).maxComputeWorkGroupCount) as usize - ptr as usize
            },
            872usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(maxComputeWorkGroupCount)
            )
        );
    }
    test_field_maxComputeWorkGroupCount();
    fn test_field_maxComputeWorkGroupSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).maxComputeWorkGroupSize) as usize - ptr as usize
            },
            896usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(maxComputeWorkGroupSize)
            )
        );
    }
    test_field_maxComputeWorkGroupSize();
    fn test_field_maxThreadsNum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).maxThreadsNum) as usize - ptr as usize
            },
            920usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(maxThreadsNum)
            )
        );
    }
    test_field_maxThreadsNum();
    fn test_field_sharedMemorySizeStatic() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sharedMemorySizeStatic) as usize - ptr as usize
            },
            928usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(sharedMemorySizeStatic)
            )
        );
    }
    test_field_sharedMemorySizeStatic();
    fn test_field_sharedMemorySize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sharedMemorySize) as usize - ptr as usize
            },
            936usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(sharedMemorySize)
            )
        );
    }
    test_field_sharedMemorySize();
    fn test_field_sharedMemorySizePow2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sharedMemorySizePow2) as usize - ptr as usize
            },
            944usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(sharedMemorySizePow2)
            )
        );
    }
    test_field_sharedMemorySizePow2();
    fn test_field_warpSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).warpSize) as usize - ptr as usize
            },
            952usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(warpSize)
            )
        );
    }
    test_field_warpSize();
    fn test_field_halfThreads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).halfThreads) as usize - ptr as usize
            },
            960usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(halfThreads)
            )
        );
    }
    test_field_halfThreads();
    fn test_field_allocateTempBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).allocateTempBuffer) as usize - ptr as usize
            },
            968usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(allocateTempBuffer)
            )
        );
    }
    test_field_allocateTempBuffer();
    fn test_field_reorderFourStep() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reorderFourStep) as usize - ptr as usize
            },
            976usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(reorderFourStep)
            )
        );
    }
    test_field_reorderFourStep();
    fn test_field_maxCodeLength() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).maxCodeLength) as usize - ptr as usize
            },
            984usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(maxCodeLength)
            )
        );
    }
    test_field_maxCodeLength();
    fn test_field_maxTempLength() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).maxTempLength) as usize - ptr as usize
            },
            992usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(maxTempLength)
            )
        );
    }
    test_field_maxTempLength();
    fn test_field_autoCustomBluesteinPaddingPattern() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).autoCustomBluesteinPaddingPattern) as usize
                    - ptr as usize
            },
            1000usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(autoCustomBluesteinPaddingPattern)
            )
        );
    }
    test_field_autoCustomBluesteinPaddingPattern();
    fn test_field_useRaderUintLUT() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).useRaderUintLUT) as usize - ptr as usize
            },
            1008usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(useRaderUintLUT)
            )
        );
    }
    test_field_useRaderUintLUT();
    fn test_field_vendorID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vendorID) as usize - ptr as usize
            },
            1016usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(vendorID)
            )
        );
    }
    test_field_vendorID();
    fn test_field_tempBufferDeviceMemory() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tempBufferDeviceMemory) as usize - ptr as usize
            },
            1024usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(tempBufferDeviceMemory)
            )
        );
    }
    test_field_tempBufferDeviceMemory();
    fn test_field_commandBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).commandBuffer) as usize - ptr as usize
            },
            1032usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(commandBuffer)
            )
        );
    }
    test_field_commandBuffer();
    fn test_field_memory_barrier() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTConfiguration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).memory_barrier) as usize - ptr as usize
            },
            1040usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTConfiguration),
                "::",
                stringify!(memory_barrier)
            )
        );
    }
    test_field_memory_barrier();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFFTLaunchParams {
    pub commandBuffer: *mut VkCommandBuffer,
    pub buffer: *mut VkBuffer,
    pub tempBuffer: *mut VkBuffer,
    pub inputBuffer: *mut VkBuffer,
    pub outputBuffer: *mut VkBuffer,
    pub kernel: *mut VkBuffer,
    pub bufferOffset: u64,
    pub tempBufferOffset: u64,
    pub inputBufferOffset: u64,
    pub outputBufferOffset: u64,
    pub kernelOffset: u64,
}
#[test]
fn bindgen_test_layout_VkFFTLaunchParams() {
    assert_eq!(
        ::std::mem::size_of::<VkFFTLaunchParams>(),
        88usize,
        concat!("Size of: ", stringify!(VkFFTLaunchParams))
    );
    assert_eq!(
        ::std::mem::align_of::<VkFFTLaunchParams>(),
        8usize,
        concat!("Alignment of ", stringify!(VkFFTLaunchParams))
    );
    fn test_field_commandBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTLaunchParams>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).commandBuffer) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTLaunchParams),
                "::",
                stringify!(commandBuffer)
            )
        );
    }
    test_field_commandBuffer();
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTLaunchParams>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTLaunchParams),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
    fn test_field_tempBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTLaunchParams>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tempBuffer) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTLaunchParams),
                "::",
                stringify!(tempBuffer)
            )
        );
    }
    test_field_tempBuffer();
    fn test_field_inputBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTLaunchParams>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inputBuffer) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTLaunchParams),
                "::",
                stringify!(inputBuffer)
            )
        );
    }
    test_field_inputBuffer();
    fn test_field_outputBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTLaunchParams>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).outputBuffer) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTLaunchParams),
                "::",
                stringify!(outputBuffer)
            )
        );
    }
    test_field_outputBuffer();
    fn test_field_kernel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTLaunchParams>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).kernel) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTLaunchParams),
                "::",
                stringify!(kernel)
            )
        );
    }
    test_field_kernel();
    fn test_field_bufferOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTLaunchParams>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferOffset) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTLaunchParams),
                "::",
                stringify!(bufferOffset)
            )
        );
    }
    test_field_bufferOffset();
    fn test_field_tempBufferOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTLaunchParams>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tempBufferOffset) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTLaunchParams),
                "::",
                stringify!(tempBufferOffset)
            )
        );
    }
    test_field_tempBufferOffset();
    fn test_field_inputBufferOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTLaunchParams>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inputBufferOffset) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTLaunchParams),
                "::",
                stringify!(inputBufferOffset)
            )
        );
    }
    test_field_inputBufferOffset();
    fn test_field_outputBufferOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTLaunchParams>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).outputBufferOffset) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTLaunchParams),
                "::",
                stringify!(outputBufferOffset)
            )
        );
    }
    test_field_outputBufferOffset();
    fn test_field_kernelOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTLaunchParams>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).kernelOffset) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTLaunchParams),
                "::",
                stringify!(kernelOffset)
            )
        );
    }
    test_field_kernelOffset();
}
pub const VkFFTResult_VKFFT_SUCCESS: VkFFTResult = 0;
pub const VkFFTResult_VKFFT_ERROR_MALLOC_FAILED: VkFFTResult = 1;
pub const VkFFTResult_VKFFT_ERROR_INSUFFICIENT_CODE_BUFFER: VkFFTResult = 2;
pub const VkFFTResult_VKFFT_ERROR_INSUFFICIENT_TEMP_BUFFER: VkFFTResult = 3;
pub const VkFFTResult_VKFFT_ERROR_PLAN_NOT_INITIALIZED: VkFFTResult = 4;
pub const VkFFTResult_VKFFT_ERROR_NULL_TEMP_PASSED: VkFFTResult = 5;
pub const VkFFTResult_VKFFT_ERROR_INVALID_PHYSICAL_DEVICE: VkFFTResult = 1001;
pub const VkFFTResult_VKFFT_ERROR_INVALID_DEVICE: VkFFTResult = 1002;
pub const VkFFTResult_VKFFT_ERROR_INVALID_QUEUE: VkFFTResult = 1003;
pub const VkFFTResult_VKFFT_ERROR_INVALID_COMMAND_POOL: VkFFTResult = 1004;
pub const VkFFTResult_VKFFT_ERROR_INVALID_FENCE: VkFFTResult = 1005;
pub const VkFFTResult_VKFFT_ERROR_ONLY_FORWARD_FFT_INITIALIZED: VkFFTResult = 1006;
pub const VkFFTResult_VKFFT_ERROR_ONLY_INVERSE_FFT_INITIALIZED: VkFFTResult = 1007;
pub const VkFFTResult_VKFFT_ERROR_INVALID_CONTEXT: VkFFTResult = 1008;
pub const VkFFTResult_VKFFT_ERROR_INVALID_PLATFORM: VkFFTResult = 1009;
pub const VkFFTResult_VKFFT_ERROR_ENABLED_saveApplicationToString: VkFFTResult = 1010;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_FILE: VkFFTResult = 1011;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_FFTdim: VkFFTResult = 2001;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_size: VkFFTResult = 2002;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_bufferSize: VkFFTResult = 2003;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_buffer: VkFFTResult = 2004;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_tempBufferSize: VkFFTResult = 2005;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_tempBuffer: VkFFTResult = 2006;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_inputBufferSize: VkFFTResult = 2007;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_inputBuffer: VkFFTResult = 2008;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_outputBufferSize: VkFFTResult = 2009;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_outputBuffer: VkFFTResult = 2010;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_kernelSize: VkFFTResult = 2011;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_kernel: VkFFTResult = 2012;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_applicationString: VkFFTResult = 2013;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_useCustomBluesteinPaddingPattern_arrays: VkFFTResult = 2014;
pub const VkFFTResult_VKFFT_ERROR_UNSUPPORTED_RADIX: VkFFTResult = 3001;
pub const VkFFTResult_VKFFT_ERROR_UNSUPPORTED_FFT_LENGTH: VkFFTResult = 3002;
pub const VkFFTResult_VKFFT_ERROR_UNSUPPORTED_FFT_LENGTH_R2C: VkFFTResult = 3003;
pub const VkFFTResult_VKFFT_ERROR_UNSUPPORTED_FFT_LENGTH_DCT: VkFFTResult = 3004;
pub const VkFFTResult_VKFFT_ERROR_UNSUPPORTED_FFT_OMIT: VkFFTResult = 3005;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_ALLOCATE: VkFFTResult = 4001;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_MAP_MEMORY: VkFFTResult = 4002;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_ALLOCATE_COMMAND_BUFFERS: VkFFTResult = 4003;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_BEGIN_COMMAND_BUFFER: VkFFTResult = 4004;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_END_COMMAND_BUFFER: VkFFTResult = 4005;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_SUBMIT_QUEUE: VkFFTResult = 4006;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_WAIT_FOR_FENCES: VkFFTResult = 4007;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_RESET_FENCES: VkFFTResult = 4008;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_DESCRIPTOR_POOL: VkFFTResult = 4009;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_DESCRIPTOR_SET_LAYOUT: VkFFTResult = 4010;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_ALLOCATE_DESCRIPTOR_SETS: VkFFTResult = 4011;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_PIPELINE_LAYOUT: VkFFTResult = 4012;
pub const VkFFTResult_VKFFT_ERROR_FAILED_SHADER_PREPROCESS: VkFFTResult = 4013;
pub const VkFFTResult_VKFFT_ERROR_FAILED_SHADER_PARSE: VkFFTResult = 4014;
pub const VkFFTResult_VKFFT_ERROR_FAILED_SHADER_LINK: VkFFTResult = 4015;
pub const VkFFTResult_VKFFT_ERROR_FAILED_SPIRV_GENERATE: VkFFTResult = 4016;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_SHADER_MODULE: VkFFTResult = 4017;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_INSTANCE: VkFFTResult = 4018;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_SETUP_DEBUG_MESSENGER: VkFFTResult = 4019;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_FIND_PHYSICAL_DEVICE: VkFFTResult = 4020;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_DEVICE: VkFFTResult = 4021;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_FENCE: VkFFTResult = 4022;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_COMMAND_POOL: VkFFTResult = 4023;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_BUFFER: VkFFTResult = 4024;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_ALLOCATE_MEMORY: VkFFTResult = 4025;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_BIND_BUFFER_MEMORY: VkFFTResult = 4026;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_FIND_MEMORY: VkFFTResult = 4027;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_SYNCHRONIZE: VkFFTResult = 4028;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_COPY: VkFFTResult = 4029;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_PROGRAM: VkFFTResult = 4030;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_COMPILE_PROGRAM: VkFFTResult = 4031;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_GET_CODE_SIZE: VkFFTResult = 4032;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_GET_CODE: VkFFTResult = 4033;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_DESTROY_PROGRAM: VkFFTResult = 4034;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_LOAD_MODULE: VkFFTResult = 4035;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_GET_FUNCTION: VkFFTResult = 4036;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_SET_DYNAMIC_SHARED_MEMORY: VkFFTResult = 4037;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_MODULE_GET_GLOBAL: VkFFTResult = 4038;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_LAUNCH_KERNEL: VkFFTResult = 4039;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_EVENT_RECORD: VkFFTResult = 4040;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_ADD_NAME_EXPRESSION: VkFFTResult = 4041;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_INITIALIZE: VkFFTResult = 4042;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_SET_DEVICE_ID: VkFFTResult = 4043;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_GET_DEVICE: VkFFTResult = 4044;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_CONTEXT: VkFFTResult = 4045;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_PIPELINE: VkFFTResult = 4046;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_SET_KERNEL_ARG: VkFFTResult = 4047;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_COMMAND_QUEUE: VkFFTResult = 4048;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_RELEASE_COMMAND_QUEUE: VkFFTResult = 4049;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_ENUMERATE_DEVICES: VkFFTResult = 4050;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_GET_ATTRIBUTE: VkFFTResult = 4051;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_EVENT: VkFFTResult = 4052;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_COMMAND_LIST: VkFFTResult = 4053;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_DESTROY_COMMAND_LIST: VkFFTResult = 4054;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_SUBMIT_BARRIER: VkFFTResult = 4055;
pub type VkFFTResult = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFFTRaderContainer {
    pub prime: u64,
    pub generator: u64,
    pub multiplier: u64,
    pub inline_rader_g_pow: u64,
    pub raderUintLUToffset: u64,
    pub type_: u64,
    pub raderRegisters: u64,
    pub rader_min_registers: u64,
    pub registers_per_thread: u64,
    pub min_registers_per_thread: u64,
    pub loc_multipliers: [u64; 33usize],
    pub registers_per_thread_per_radix: [u64; 33usize],
    pub stageRadix: [u64; 20usize],
    pub numStages: u64,
    pub numSubPrimes: u64,
    pub stage_rader_generator: [u64; 20usize],
    pub containerFFTDim: u64,
    pub containerFFTNum: u64,
    pub subLogicalGroupSizeMax: u64,
    pub RaderKernelOffsetLUT: u64,
    pub RaderRadixOffsetLUT: u64,
    pub RaderRadixOffsetLUTiFFT: u64,
    pub raderFFTkernel: *mut ::std::os::raw::c_void,
    pub container: *mut VkFFTRaderContainer,
}
#[test]
fn bindgen_test_layout_VkFFTRaderContainer() {
    assert_eq!(
        ::std::mem::size_of::<VkFFTRaderContainer>(),
        1008usize,
        concat!("Size of: ", stringify!(VkFFTRaderContainer))
    );
    assert_eq!(
        ::std::mem::align_of::<VkFFTRaderContainer>(),
        8usize,
        concat!("Alignment of ", stringify!(VkFFTRaderContainer))
    );
    fn test_field_prime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTRaderContainer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prime) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTRaderContainer),
                "::",
                stringify!(prime)
            )
        );
    }
    test_field_prime();
    fn test_field_generator() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTRaderContainer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).generator) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTRaderContainer),
                "::",
                stringify!(generator)
            )
        );
    }
    test_field_generator();
    fn test_field_multiplier() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTRaderContainer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).multiplier) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTRaderContainer),
                "::",
                stringify!(multiplier)
            )
        );
    }
    test_field_multiplier();
    fn test_field_inline_rader_g_pow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTRaderContainer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inline_rader_g_pow) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTRaderContainer),
                "::",
                stringify!(inline_rader_g_pow)
            )
        );
    }
    test_field_inline_rader_g_pow();
    fn test_field_raderUintLUToffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTRaderContainer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).raderUintLUToffset) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTRaderContainer),
                "::",
                stringify!(raderUintLUToffset)
            )
        );
    }
    test_field_raderUintLUToffset();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTRaderContainer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTRaderContainer),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_raderRegisters() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTRaderContainer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).raderRegisters) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTRaderContainer),
                "::",
                stringify!(raderRegisters)
            )
        );
    }
    test_field_raderRegisters();
    fn test_field_rader_min_registers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTRaderContainer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rader_min_registers) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTRaderContainer),
                "::",
                stringify!(rader_min_registers)
            )
        );
    }
    test_field_rader_min_registers();
    fn test_field_registers_per_thread() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTRaderContainer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).registers_per_thread) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTRaderContainer),
                "::",
                stringify!(registers_per_thread)
            )
        );
    }
    test_field_registers_per_thread();
    fn test_field_min_registers_per_thread() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTRaderContainer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).min_registers_per_thread) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTRaderContainer),
                "::",
                stringify!(min_registers_per_thread)
            )
        );
    }
    test_field_min_registers_per_thread();
    fn test_field_loc_multipliers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTRaderContainer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).loc_multipliers) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTRaderContainer),
                "::",
                stringify!(loc_multipliers)
            )
        );
    }
    test_field_loc_multipliers();
    fn test_field_registers_per_thread_per_radix() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTRaderContainer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).registers_per_thread_per_radix) as usize - ptr as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTRaderContainer),
                "::",
                stringify!(registers_per_thread_per_radix)
            )
        );
    }
    test_field_registers_per_thread_per_radix();
    fn test_field_stageRadix() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTRaderContainer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stageRadix) as usize - ptr as usize
            },
            608usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTRaderContainer),
                "::",
                stringify!(stageRadix)
            )
        );
    }
    test_field_stageRadix();
    fn test_field_numStages() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTRaderContainer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numStages) as usize - ptr as usize
            },
            768usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTRaderContainer),
                "::",
                stringify!(numStages)
            )
        );
    }
    test_field_numStages();
    fn test_field_numSubPrimes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTRaderContainer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numSubPrimes) as usize - ptr as usize
            },
            776usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTRaderContainer),
                "::",
                stringify!(numSubPrimes)
            )
        );
    }
    test_field_numSubPrimes();
    fn test_field_stage_rader_generator() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTRaderContainer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stage_rader_generator) as usize - ptr as usize
            },
            784usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTRaderContainer),
                "::",
                stringify!(stage_rader_generator)
            )
        );
    }
    test_field_stage_rader_generator();
    fn test_field_containerFFTDim() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTRaderContainer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).containerFFTDim) as usize - ptr as usize
            },
            944usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTRaderContainer),
                "::",
                stringify!(containerFFTDim)
            )
        );
    }
    test_field_containerFFTDim();
    fn test_field_containerFFTNum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTRaderContainer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).containerFFTNum) as usize - ptr as usize
            },
            952usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTRaderContainer),
                "::",
                stringify!(containerFFTNum)
            )
        );
    }
    test_field_containerFFTNum();
    fn test_field_subLogicalGroupSizeMax() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTRaderContainer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).subLogicalGroupSizeMax) as usize - ptr as usize
            },
            960usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTRaderContainer),
                "::",
                stringify!(subLogicalGroupSizeMax)
            )
        );
    }
    test_field_subLogicalGroupSizeMax();
    fn test_field_RaderKernelOffsetLUT() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTRaderContainer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RaderKernelOffsetLUT) as usize - ptr as usize
            },
            968usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTRaderContainer),
                "::",
                stringify!(RaderKernelOffsetLUT)
            )
        );
    }
    test_field_RaderKernelOffsetLUT();
    fn test_field_RaderRadixOffsetLUT() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTRaderContainer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RaderRadixOffsetLUT) as usize - ptr as usize
            },
            976usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTRaderContainer),
                "::",
                stringify!(RaderRadixOffsetLUT)
            )
        );
    }
    test_field_RaderRadixOffsetLUT();
    fn test_field_RaderRadixOffsetLUTiFFT() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTRaderContainer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RaderRadixOffsetLUTiFFT) as usize - ptr as usize
            },
            984usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTRaderContainer),
                "::",
                stringify!(RaderRadixOffsetLUTiFFT)
            )
        );
    }
    test_field_RaderRadixOffsetLUTiFFT();
    fn test_field_raderFFTkernel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTRaderContainer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).raderFFTkernel) as usize - ptr as usize
            },
            992usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTRaderContainer),
                "::",
                stringify!(raderFFTkernel)
            )
        );
    }
    test_field_raderFFTkernel();
    fn test_field_container() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTRaderContainer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).container) as usize - ptr as usize
            },
            1000usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTRaderContainer),
                "::",
                stringify!(container)
            )
        );
    }
    test_field_container();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFFTSpecializationConstantsLayout {
    pub size: [u64; 3usize],
    pub localSize: [u64; 3usize],
    pub numSubgroups: u64,
    pub sourceFFTSize: u64,
    pub fftDim: u64,
    pub inverse: u64,
    pub actualInverse: u64,
    pub inverseBluestein: u64,
    pub zeropad: [u64; 2usize],
    pub zeropadBluestein: [u64; 2usize],
    pub axis_id: u64,
    pub axis_upload_id: u64,
    pub numAxisUploads: u64,
    pub registers_per_thread: u64,
    pub registers_per_thread_per_radix: [u64; 33usize],
    pub min_registers_per_thread: u64,
    pub maxNonPow2Radix: u64,
    pub usedLocRegs: u64,
    pub readToRegisters: u64,
    pub writeFromRegisters: u64,
    pub LUT: u64,
    pub LUT_4step: u64,
    pub raderUintLUT: u64,
    pub useCoalescedLUTUploadToSM: u64,
    pub useBluesteinFFT: u64,
    pub reverseBluesteinMultiUpload: u64,
    pub BluesteinConvolutionStep: u64,
    pub BluesteinPreMultiplication: u64,
    pub BluesteinPostMultiplication: u64,
    pub startDCT3LUT: u64,
    pub startDCT4LUT: u64,
    pub performR2C: u64,
    pub performR2CmultiUpload: u64,
    pub performDCT: u64,
    pub performBandwidthBoost: u64,
    pub frequencyZeropadding: u64,
    pub performZeropaddingFull: [u64; 3usize],
    pub performZeropaddingInput: [u64; 3usize],
    pub performZeropaddingOutput: [u64; 3usize],
    pub fft_zeropad_left_full: [u64; 3usize],
    pub fft_zeropad_left_read: [u64; 3usize],
    pub fft_zeropad_left_write: [u64; 3usize],
    pub fft_zeropad_right_full: [u64; 3usize],
    pub fft_zeropad_right_read: [u64; 3usize],
    pub fft_zeropad_right_write: [u64; 3usize],
    pub fft_zeropad_Bluestein_left_read: [u64; 3usize],
    pub fft_zeropad_Bluestein_left_write: [u64; 3usize],
    pub fft_zeropad_Bluestein_right_read: [u64; 3usize],
    pub fft_zeropad_Bluestein_right_write: [u64; 3usize],
    pub inputStride: [u64; 5usize],
    pub outputStride: [u64; 5usize],
    pub fft_dim_full: u64,
    pub stageStartSize: u64,
    pub firstStageStartSize: u64,
    pub fft_dim_x: u64,
    pub dispatchZactualFFTSize: u64,
    pub numStages: u64,
    pub stageRadix: [u64; 33usize],
    pub inputOffset: u64,
    pub kernelOffset: u64,
    pub outputOffset: u64,
    pub reorderFourStep: u64,
    pub pushConstantsStructSize: u64,
    pub performWorkGroupShift: [u64; 3usize],
    pub performPostCompilationInputOffset: u64,
    pub performPostCompilationOutputOffset: u64,
    pub performPostCompilationKernelOffset: u64,
    pub inputBufferBlockNum: u64,
    pub inputBufferBlockSize: u64,
    pub outputBufferBlockNum: u64,
    pub outputBufferBlockSize: u64,
    pub kernelBlockNum: u64,
    pub kernelBlockSize: u64,
    pub numCoordinates: u64,
    pub matrixConvolution: u64,
    pub numBatches: u64,
    pub numKernels: u64,
    pub conjugateConvolution: u64,
    pub crossPowerSpectrumNormalization: u64,
    pub usedSharedMemory: u64,
    pub sharedMemSize: u64,
    pub sharedMemSizePow2: u64,
    pub normalize: u64,
    pub complexSize: u64,
    pub inputNumberByteSize: u64,
    pub outputNumberByteSize: u64,
    pub kernelNumberByteSize: u64,
    pub maxStageSumLUT: u64,
    pub unroll: u64,
    pub swapComputeWorkGroupID: u64,
    pub convolutionStep: u64,
    pub symmetricKernel: u64,
    pub supportAxis: u64,
    pub cacheShuffle: u64,
    pub registerBoost: u64,
    pub warpSize: u64,
    pub numSharedBanks: u64,
    pub resolveBankConflictFirstStages: u64,
    pub sharedStrideBankConflictFirstStages: u64,
    pub sharedStrideReadWriteConflict: u64,
    pub sharedStrideRaderFFT: u64,
    pub sharedShiftRaderFFT: u64,
    pub maxSharedStride: u64,
    pub axisSwapped: u64,
    pub mergeSequencesR2C: u64,
    pub numBuffersBound: [u64; 10usize],
    pub convolutionBindingID: u64,
    pub LUTBindingID: u64,
    pub BluesteinConvolutionBindingID: u64,
    pub BluesteinMultiplicationBindingID: u64,
    pub useRader: u64,
    pub numRaderPrimes: u64,
    pub minRaderFFTThreadNum: u64,
    pub raderContainer: *mut VkFFTRaderContainer,
    pub currentRaderContainer: *mut VkFFTRaderContainer,
    pub RaderUintLUTBindingID: u64,
    pub useRaderMult: u64,
    pub additionalRaderSharedSize: u64,
    pub RaderKernelOffsetShared: [u64; 33usize],
    pub RaderKernelOffsetLUT: [u64; 33usize],
    pub rader_generator: [u64; 33usize],
    pub fixMinRaderPrimeMult: u64,
    pub fixMaxRaderPrimeMult: u64,
    pub fixMinRaderPrimeFFT: u64,
    pub fixMaxRaderPrimeFFT: u64,
    pub inline_rader_g_pow: u64,
    pub inline_rader_kernel: u64,
    pub raderRegisters: u64,
    pub rader_min_registers: u64,
    pub useRaderFFT: u64,
    pub performOffsetUpdate: u64,
    pub performBufferSetUpdate: u64,
    pub useUint64: u64,
    pub disableSetLocale: u64,
    pub regIDs: *mut *mut ::std::os::raw::c_char,
    pub disableThreadsStart: *mut ::std::os::raw::c_char,
    pub disableThreadsEnd: *mut ::std::os::raw::c_char,
    pub sdataID: [::std::os::raw::c_char; 50usize],
    pub inoutID: [::std::os::raw::c_char; 50usize],
    pub combinedID: [::std::os::raw::c_char; 50usize],
    pub raderIDx: [::std::os::raw::c_char; 50usize],
    pub raderIDx2: [::std::os::raw::c_char; 50usize],
    pub gl_LocalInvocationID_x: [::std::os::raw::c_char; 50usize],
    pub gl_LocalInvocationID_y: [::std::os::raw::c_char; 50usize],
    pub gl_LocalInvocationID_z: [::std::os::raw::c_char; 50usize],
    pub gl_GlobalInvocationID_x: [::std::os::raw::c_char; 200usize],
    pub gl_GlobalInvocationID_y: [::std::os::raw::c_char; 200usize],
    pub gl_GlobalInvocationID_z: [::std::os::raw::c_char; 200usize],
    pub gl_SubgroupInvocationID: [::std::os::raw::c_char; 200usize],
    pub gl_SubgroupID: [::std::os::raw::c_char; 200usize],
    pub tshuffle: [::std::os::raw::c_char; 50usize],
    pub sharedStride: [::std::os::raw::c_char; 50usize],
    pub gl_WorkGroupSize_x: [::std::os::raw::c_char; 50usize],
    pub gl_WorkGroupSize_y: [::std::os::raw::c_char; 50usize],
    pub gl_WorkGroupSize_z: [::std::os::raw::c_char; 50usize],
    pub gl_WorkGroupID_x: [::std::os::raw::c_char; 50usize],
    pub gl_WorkGroupID_y: [::std::os::raw::c_char; 50usize],
    pub gl_WorkGroupID_z: [::std::os::raw::c_char; 50usize],
    pub tempReg: [::std::os::raw::c_char; 50usize],
    pub stageInvocationID: [::std::os::raw::c_char; 50usize],
    pub blockInvocationID: [::std::os::raw::c_char; 50usize],
    pub temp: [::std::os::raw::c_char; 50usize],
    pub w: [::std::os::raw::c_char; 50usize],
    pub iw: [::std::os::raw::c_char; 50usize],
    pub x0: [[::std::os::raw::c_char; 40usize]; 33usize],
    pub locID: [[::std::os::raw::c_char; 40usize]; 33usize],
    pub code0: *mut ::std::os::raw::c_char,
    pub output: *mut ::std::os::raw::c_char,
    pub tempStr: *mut ::std::os::raw::c_char,
    pub tempLen: i64,
    pub currentLen: i64,
    pub maxCodeLength: i64,
    pub maxTempLength: i64,
    pub oldLocale: [::std::os::raw::c_char; 100usize],
}
#[test]
fn bindgen_test_layout_VkFFTSpecializationConstantsLayout() {
    assert_eq!(
        ::std::mem::size_of::<VkFFTSpecializationConstantsLayout>(),
        7688usize,
        concat!("Size of: ", stringify!(VkFFTSpecializationConstantsLayout))
    );
    assert_eq!(
        ::std::mem::align_of::<VkFFTSpecializationConstantsLayout>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkFFTSpecializationConstantsLayout)
        )
    );
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_localSize() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).localSize) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(localSize)
            )
        );
    }
    test_field_localSize();
    fn test_field_numSubgroups() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numSubgroups) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(numSubgroups)
            )
        );
    }
    test_field_numSubgroups();
    fn test_field_sourceFFTSize() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sourceFFTSize) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(sourceFFTSize)
            )
        );
    }
    test_field_sourceFFTSize();
    fn test_field_fftDim() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fftDim) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(fftDim)
            )
        );
    }
    test_field_fftDim();
    fn test_field_inverse() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inverse) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(inverse)
            )
        );
    }
    test_field_inverse();
    fn test_field_actualInverse() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actualInverse) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(actualInverse)
            )
        );
    }
    test_field_actualInverse();
    fn test_field_inverseBluestein() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inverseBluestein) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(inverseBluestein)
            )
        );
    }
    test_field_inverseBluestein();
    fn test_field_zeropad() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zeropad) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(zeropad)
            )
        );
    }
    test_field_zeropad();
    fn test_field_zeropadBluestein() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zeropadBluestein) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(zeropadBluestein)
            )
        );
    }
    test_field_zeropadBluestein();
    fn test_field_axis_id() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).axis_id) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(axis_id)
            )
        );
    }
    test_field_axis_id();
    fn test_field_axis_upload_id() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).axis_upload_id) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(axis_upload_id)
            )
        );
    }
    test_field_axis_upload_id();
    fn test_field_numAxisUploads() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numAxisUploads) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(numAxisUploads)
            )
        );
    }
    test_field_numAxisUploads();
    fn test_field_registers_per_thread() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).registers_per_thread) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(registers_per_thread)
            )
        );
    }
    test_field_registers_per_thread();
    fn test_field_registers_per_thread_per_radix() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).registers_per_thread_per_radix) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(registers_per_thread_per_radix)
            )
        );
    }
    test_field_registers_per_thread_per_radix();
    fn test_field_min_registers_per_thread() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).min_registers_per_thread) as usize - ptr as usize
            },
            424usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(min_registers_per_thread)
            )
        );
    }
    test_field_min_registers_per_thread();
    fn test_field_maxNonPow2Radix() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).maxNonPow2Radix) as usize - ptr as usize
            },
            432usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(maxNonPow2Radix)
            )
        );
    }
    test_field_maxNonPow2Radix();
    fn test_field_usedLocRegs() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).usedLocRegs) as usize - ptr as usize
            },
            440usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(usedLocRegs)
            )
        );
    }
    test_field_usedLocRegs();
    fn test_field_readToRegisters() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).readToRegisters) as usize - ptr as usize
            },
            448usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(readToRegisters)
            )
        );
    }
    test_field_readToRegisters();
    fn test_field_writeFromRegisters() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).writeFromRegisters) as usize - ptr as usize
            },
            456usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(writeFromRegisters)
            )
        );
    }
    test_field_writeFromRegisters();
    fn test_field_LUT() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LUT) as usize - ptr as usize
            },
            464usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(LUT)
            )
        );
    }
    test_field_LUT();
    fn test_field_LUT_4step() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LUT_4step) as usize - ptr as usize
            },
            472usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(LUT_4step)
            )
        );
    }
    test_field_LUT_4step();
    fn test_field_raderUintLUT() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).raderUintLUT) as usize - ptr as usize
            },
            480usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(raderUintLUT)
            )
        );
    }
    test_field_raderUintLUT();
    fn test_field_useCoalescedLUTUploadToSM() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).useCoalescedLUTUploadToSM) as usize - ptr as usize
            },
            488usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(useCoalescedLUTUploadToSM)
            )
        );
    }
    test_field_useCoalescedLUTUploadToSM();
    fn test_field_useBluesteinFFT() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).useBluesteinFFT) as usize - ptr as usize
            },
            496usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(useBluesteinFFT)
            )
        );
    }
    test_field_useBluesteinFFT();
    fn test_field_reverseBluesteinMultiUpload() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reverseBluesteinMultiUpload) as usize - ptr as usize
            },
            504usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(reverseBluesteinMultiUpload)
            )
        );
    }
    test_field_reverseBluesteinMultiUpload();
    fn test_field_BluesteinConvolutionStep() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BluesteinConvolutionStep) as usize - ptr as usize
            },
            512usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(BluesteinConvolutionStep)
            )
        );
    }
    test_field_BluesteinConvolutionStep();
    fn test_field_BluesteinPreMultiplication() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BluesteinPreMultiplication) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(BluesteinPreMultiplication)
            )
        );
    }
    test_field_BluesteinPreMultiplication();
    fn test_field_BluesteinPostMultiplication() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BluesteinPostMultiplication) as usize - ptr as usize
            },
            528usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(BluesteinPostMultiplication)
            )
        );
    }
    test_field_BluesteinPostMultiplication();
    fn test_field_startDCT3LUT() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).startDCT3LUT) as usize - ptr as usize
            },
            536usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(startDCT3LUT)
            )
        );
    }
    test_field_startDCT3LUT();
    fn test_field_startDCT4LUT() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).startDCT4LUT) as usize - ptr as usize
            },
            544usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(startDCT4LUT)
            )
        );
    }
    test_field_startDCT4LUT();
    fn test_field_performR2C() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).performR2C) as usize - ptr as usize
            },
            552usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(performR2C)
            )
        );
    }
    test_field_performR2C();
    fn test_field_performR2CmultiUpload() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).performR2CmultiUpload) as usize - ptr as usize
            },
            560usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(performR2CmultiUpload)
            )
        );
    }
    test_field_performR2CmultiUpload();
    fn test_field_performDCT() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).performDCT) as usize - ptr as usize
            },
            568usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(performDCT)
            )
        );
    }
    test_field_performDCT();
    fn test_field_performBandwidthBoost() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).performBandwidthBoost) as usize - ptr as usize
            },
            576usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(performBandwidthBoost)
            )
        );
    }
    test_field_performBandwidthBoost();
    fn test_field_frequencyZeropadding() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).frequencyZeropadding) as usize - ptr as usize
            },
            584usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(frequencyZeropadding)
            )
        );
    }
    test_field_frequencyZeropadding();
    fn test_field_performZeropaddingFull() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).performZeropaddingFull) as usize - ptr as usize
            },
            592usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(performZeropaddingFull)
            )
        );
    }
    test_field_performZeropaddingFull();
    fn test_field_performZeropaddingInput() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).performZeropaddingInput) as usize - ptr as usize
            },
            616usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(performZeropaddingInput)
            )
        );
    }
    test_field_performZeropaddingInput();
    fn test_field_performZeropaddingOutput() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).performZeropaddingOutput) as usize - ptr as usize
            },
            640usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(performZeropaddingOutput)
            )
        );
    }
    test_field_performZeropaddingOutput();
    fn test_field_fft_zeropad_left_full() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fft_zeropad_left_full) as usize - ptr as usize
            },
            664usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(fft_zeropad_left_full)
            )
        );
    }
    test_field_fft_zeropad_left_full();
    fn test_field_fft_zeropad_left_read() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fft_zeropad_left_read) as usize - ptr as usize
            },
            688usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(fft_zeropad_left_read)
            )
        );
    }
    test_field_fft_zeropad_left_read();
    fn test_field_fft_zeropad_left_write() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fft_zeropad_left_write) as usize - ptr as usize
            },
            712usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(fft_zeropad_left_write)
            )
        );
    }
    test_field_fft_zeropad_left_write();
    fn test_field_fft_zeropad_right_full() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fft_zeropad_right_full) as usize - ptr as usize
            },
            736usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(fft_zeropad_right_full)
            )
        );
    }
    test_field_fft_zeropad_right_full();
    fn test_field_fft_zeropad_right_read() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fft_zeropad_right_read) as usize - ptr as usize
            },
            760usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(fft_zeropad_right_read)
            )
        );
    }
    test_field_fft_zeropad_right_read();
    fn test_field_fft_zeropad_right_write() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fft_zeropad_right_write) as usize - ptr as usize
            },
            784usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(fft_zeropad_right_write)
            )
        );
    }
    test_field_fft_zeropad_right_write();
    fn test_field_fft_zeropad_Bluestein_left_read() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fft_zeropad_Bluestein_left_read) as usize - ptr as usize
            },
            808usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(fft_zeropad_Bluestein_left_read)
            )
        );
    }
    test_field_fft_zeropad_Bluestein_left_read();
    fn test_field_fft_zeropad_Bluestein_left_write() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fft_zeropad_Bluestein_left_write) as usize
                    - ptr as usize
            },
            832usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(fft_zeropad_Bluestein_left_write)
            )
        );
    }
    test_field_fft_zeropad_Bluestein_left_write();
    fn test_field_fft_zeropad_Bluestein_right_read() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fft_zeropad_Bluestein_right_read) as usize
                    - ptr as usize
            },
            856usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(fft_zeropad_Bluestein_right_read)
            )
        );
    }
    test_field_fft_zeropad_Bluestein_right_read();
    fn test_field_fft_zeropad_Bluestein_right_write() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fft_zeropad_Bluestein_right_write) as usize
                    - ptr as usize
            },
            880usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(fft_zeropad_Bluestein_right_write)
            )
        );
    }
    test_field_fft_zeropad_Bluestein_right_write();
    fn test_field_inputStride() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inputStride) as usize - ptr as usize
            },
            904usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(inputStride)
            )
        );
    }
    test_field_inputStride();
    fn test_field_outputStride() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).outputStride) as usize - ptr as usize
            },
            944usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(outputStride)
            )
        );
    }
    test_field_outputStride();
    fn test_field_fft_dim_full() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fft_dim_full) as usize - ptr as usize
            },
            984usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(fft_dim_full)
            )
        );
    }
    test_field_fft_dim_full();
    fn test_field_stageStartSize() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stageStartSize) as usize - ptr as usize
            },
            992usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(stageStartSize)
            )
        );
    }
    test_field_stageStartSize();
    fn test_field_firstStageStartSize() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).firstStageStartSize) as usize - ptr as usize
            },
            1000usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(firstStageStartSize)
            )
        );
    }
    test_field_firstStageStartSize();
    fn test_field_fft_dim_x() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fft_dim_x) as usize - ptr as usize
            },
            1008usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(fft_dim_x)
            )
        );
    }
    test_field_fft_dim_x();
    fn test_field_dispatchZactualFFTSize() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dispatchZactualFFTSize) as usize - ptr as usize
            },
            1016usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(dispatchZactualFFTSize)
            )
        );
    }
    test_field_dispatchZactualFFTSize();
    fn test_field_numStages() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numStages) as usize - ptr as usize
            },
            1024usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(numStages)
            )
        );
    }
    test_field_numStages();
    fn test_field_stageRadix() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stageRadix) as usize - ptr as usize
            },
            1032usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(stageRadix)
            )
        );
    }
    test_field_stageRadix();
    fn test_field_inputOffset() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inputOffset) as usize - ptr as usize
            },
            1296usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(inputOffset)
            )
        );
    }
    test_field_inputOffset();
    fn test_field_kernelOffset() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).kernelOffset) as usize - ptr as usize
            },
            1304usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(kernelOffset)
            )
        );
    }
    test_field_kernelOffset();
    fn test_field_outputOffset() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).outputOffset) as usize - ptr as usize
            },
            1312usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(outputOffset)
            )
        );
    }
    test_field_outputOffset();
    fn test_field_reorderFourStep() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reorderFourStep) as usize - ptr as usize
            },
            1320usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(reorderFourStep)
            )
        );
    }
    test_field_reorderFourStep();
    fn test_field_pushConstantsStructSize() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pushConstantsStructSize) as usize - ptr as usize
            },
            1328usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(pushConstantsStructSize)
            )
        );
    }
    test_field_pushConstantsStructSize();
    fn test_field_performWorkGroupShift() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).performWorkGroupShift) as usize - ptr as usize
            },
            1336usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(performWorkGroupShift)
            )
        );
    }
    test_field_performWorkGroupShift();
    fn test_field_performPostCompilationInputOffset() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).performPostCompilationInputOffset) as usize
                    - ptr as usize
            },
            1360usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(performPostCompilationInputOffset)
            )
        );
    }
    test_field_performPostCompilationInputOffset();
    fn test_field_performPostCompilationOutputOffset() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).performPostCompilationOutputOffset) as usize
                    - ptr as usize
            },
            1368usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(performPostCompilationOutputOffset)
            )
        );
    }
    test_field_performPostCompilationOutputOffset();
    fn test_field_performPostCompilationKernelOffset() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).performPostCompilationKernelOffset) as usize
                    - ptr as usize
            },
            1376usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(performPostCompilationKernelOffset)
            )
        );
    }
    test_field_performPostCompilationKernelOffset();
    fn test_field_inputBufferBlockNum() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inputBufferBlockNum) as usize - ptr as usize
            },
            1384usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(inputBufferBlockNum)
            )
        );
    }
    test_field_inputBufferBlockNum();
    fn test_field_inputBufferBlockSize() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inputBufferBlockSize) as usize - ptr as usize
            },
            1392usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(inputBufferBlockSize)
            )
        );
    }
    test_field_inputBufferBlockSize();
    fn test_field_outputBufferBlockNum() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).outputBufferBlockNum) as usize - ptr as usize
            },
            1400usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(outputBufferBlockNum)
            )
        );
    }
    test_field_outputBufferBlockNum();
    fn test_field_outputBufferBlockSize() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).outputBufferBlockSize) as usize - ptr as usize
            },
            1408usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(outputBufferBlockSize)
            )
        );
    }
    test_field_outputBufferBlockSize();
    fn test_field_kernelBlockNum() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).kernelBlockNum) as usize - ptr as usize
            },
            1416usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(kernelBlockNum)
            )
        );
    }
    test_field_kernelBlockNum();
    fn test_field_kernelBlockSize() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).kernelBlockSize) as usize - ptr as usize
            },
            1424usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(kernelBlockSize)
            )
        );
    }
    test_field_kernelBlockSize();
    fn test_field_numCoordinates() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numCoordinates) as usize - ptr as usize
            },
            1432usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(numCoordinates)
            )
        );
    }
    test_field_numCoordinates();
    fn test_field_matrixConvolution() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).matrixConvolution) as usize - ptr as usize
            },
            1440usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(matrixConvolution)
            )
        );
    }
    test_field_matrixConvolution();
    fn test_field_numBatches() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numBatches) as usize - ptr as usize
            },
            1448usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(numBatches)
            )
        );
    }
    test_field_numBatches();
    fn test_field_numKernels() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numKernels) as usize - ptr as usize
            },
            1456usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(numKernels)
            )
        );
    }
    test_field_numKernels();
    fn test_field_conjugateConvolution() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).conjugateConvolution) as usize - ptr as usize
            },
            1464usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(conjugateConvolution)
            )
        );
    }
    test_field_conjugateConvolution();
    fn test_field_crossPowerSpectrumNormalization() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).crossPowerSpectrumNormalization) as usize - ptr as usize
            },
            1472usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(crossPowerSpectrumNormalization)
            )
        );
    }
    test_field_crossPowerSpectrumNormalization();
    fn test_field_usedSharedMemory() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).usedSharedMemory) as usize - ptr as usize
            },
            1480usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(usedSharedMemory)
            )
        );
    }
    test_field_usedSharedMemory();
    fn test_field_sharedMemSize() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sharedMemSize) as usize - ptr as usize
            },
            1488usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(sharedMemSize)
            )
        );
    }
    test_field_sharedMemSize();
    fn test_field_sharedMemSizePow2() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sharedMemSizePow2) as usize - ptr as usize
            },
            1496usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(sharedMemSizePow2)
            )
        );
    }
    test_field_sharedMemSizePow2();
    fn test_field_normalize() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).normalize) as usize - ptr as usize
            },
            1504usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(normalize)
            )
        );
    }
    test_field_normalize();
    fn test_field_complexSize() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).complexSize) as usize - ptr as usize
            },
            1512usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(complexSize)
            )
        );
    }
    test_field_complexSize();
    fn test_field_inputNumberByteSize() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inputNumberByteSize) as usize - ptr as usize
            },
            1520usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(inputNumberByteSize)
            )
        );
    }
    test_field_inputNumberByteSize();
    fn test_field_outputNumberByteSize() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).outputNumberByteSize) as usize - ptr as usize
            },
            1528usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(outputNumberByteSize)
            )
        );
    }
    test_field_outputNumberByteSize();
    fn test_field_kernelNumberByteSize() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).kernelNumberByteSize) as usize - ptr as usize
            },
            1536usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(kernelNumberByteSize)
            )
        );
    }
    test_field_kernelNumberByteSize();
    fn test_field_maxStageSumLUT() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).maxStageSumLUT) as usize - ptr as usize
            },
            1544usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(maxStageSumLUT)
            )
        );
    }
    test_field_maxStageSumLUT();
    fn test_field_unroll() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unroll) as usize - ptr as usize
            },
            1552usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(unroll)
            )
        );
    }
    test_field_unroll();
    fn test_field_swapComputeWorkGroupID() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).swapComputeWorkGroupID) as usize - ptr as usize
            },
            1560usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(swapComputeWorkGroupID)
            )
        );
    }
    test_field_swapComputeWorkGroupID();
    fn test_field_convolutionStep() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).convolutionStep) as usize - ptr as usize
            },
            1568usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(convolutionStep)
            )
        );
    }
    test_field_convolutionStep();
    fn test_field_symmetricKernel() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).symmetricKernel) as usize - ptr as usize
            },
            1576usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(symmetricKernel)
            )
        );
    }
    test_field_symmetricKernel();
    fn test_field_supportAxis() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).supportAxis) as usize - ptr as usize
            },
            1584usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(supportAxis)
            )
        );
    }
    test_field_supportAxis();
    fn test_field_cacheShuffle() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cacheShuffle) as usize - ptr as usize
            },
            1592usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(cacheShuffle)
            )
        );
    }
    test_field_cacheShuffle();
    fn test_field_registerBoost() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).registerBoost) as usize - ptr as usize
            },
            1600usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(registerBoost)
            )
        );
    }
    test_field_registerBoost();
    fn test_field_warpSize() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).warpSize) as usize - ptr as usize
            },
            1608usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(warpSize)
            )
        );
    }
    test_field_warpSize();
    fn test_field_numSharedBanks() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numSharedBanks) as usize - ptr as usize
            },
            1616usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(numSharedBanks)
            )
        );
    }
    test_field_numSharedBanks();
    fn test_field_resolveBankConflictFirstStages() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).resolveBankConflictFirstStages) as usize - ptr as usize
            },
            1624usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(resolveBankConflictFirstStages)
            )
        );
    }
    test_field_resolveBankConflictFirstStages();
    fn test_field_sharedStrideBankConflictFirstStages() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sharedStrideBankConflictFirstStages) as usize
                    - ptr as usize
            },
            1632usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(sharedStrideBankConflictFirstStages)
            )
        );
    }
    test_field_sharedStrideBankConflictFirstStages();
    fn test_field_sharedStrideReadWriteConflict() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sharedStrideReadWriteConflict) as usize - ptr as usize
            },
            1640usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(sharedStrideReadWriteConflict)
            )
        );
    }
    test_field_sharedStrideReadWriteConflict();
    fn test_field_sharedStrideRaderFFT() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sharedStrideRaderFFT) as usize - ptr as usize
            },
            1648usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(sharedStrideRaderFFT)
            )
        );
    }
    test_field_sharedStrideRaderFFT();
    fn test_field_sharedShiftRaderFFT() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sharedShiftRaderFFT) as usize - ptr as usize
            },
            1656usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(sharedShiftRaderFFT)
            )
        );
    }
    test_field_sharedShiftRaderFFT();
    fn test_field_maxSharedStride() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).maxSharedStride) as usize - ptr as usize
            },
            1664usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(maxSharedStride)
            )
        );
    }
    test_field_maxSharedStride();
    fn test_field_axisSwapped() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).axisSwapped) as usize - ptr as usize
            },
            1672usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(axisSwapped)
            )
        );
    }
    test_field_axisSwapped();
    fn test_field_mergeSequencesR2C() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mergeSequencesR2C) as usize - ptr as usize
            },
            1680usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(mergeSequencesR2C)
            )
        );
    }
    test_field_mergeSequencesR2C();
    fn test_field_numBuffersBound() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numBuffersBound) as usize - ptr as usize
            },
            1688usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(numBuffersBound)
            )
        );
    }
    test_field_numBuffersBound();
    fn test_field_convolutionBindingID() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).convolutionBindingID) as usize - ptr as usize
            },
            1768usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(convolutionBindingID)
            )
        );
    }
    test_field_convolutionBindingID();
    fn test_field_LUTBindingID() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LUTBindingID) as usize - ptr as usize
            },
            1776usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(LUTBindingID)
            )
        );
    }
    test_field_LUTBindingID();
    fn test_field_BluesteinConvolutionBindingID() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BluesteinConvolutionBindingID) as usize - ptr as usize
            },
            1784usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(BluesteinConvolutionBindingID)
            )
        );
    }
    test_field_BluesteinConvolutionBindingID();
    fn test_field_BluesteinMultiplicationBindingID() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BluesteinMultiplicationBindingID) as usize
                    - ptr as usize
            },
            1792usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(BluesteinMultiplicationBindingID)
            )
        );
    }
    test_field_BluesteinMultiplicationBindingID();
    fn test_field_useRader() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).useRader) as usize - ptr as usize
            },
            1800usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(useRader)
            )
        );
    }
    test_field_useRader();
    fn test_field_numRaderPrimes() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numRaderPrimes) as usize - ptr as usize
            },
            1808usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(numRaderPrimes)
            )
        );
    }
    test_field_numRaderPrimes();
    fn test_field_minRaderFFTThreadNum() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).minRaderFFTThreadNum) as usize - ptr as usize
            },
            1816usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(minRaderFFTThreadNum)
            )
        );
    }
    test_field_minRaderFFTThreadNum();
    fn test_field_raderContainer() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).raderContainer) as usize - ptr as usize
            },
            1824usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(raderContainer)
            )
        );
    }
    test_field_raderContainer();
    fn test_field_currentRaderContainer() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).currentRaderContainer) as usize - ptr as usize
            },
            1832usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(currentRaderContainer)
            )
        );
    }
    test_field_currentRaderContainer();
    fn test_field_RaderUintLUTBindingID() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RaderUintLUTBindingID) as usize - ptr as usize
            },
            1840usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(RaderUintLUTBindingID)
            )
        );
    }
    test_field_RaderUintLUTBindingID();
    fn test_field_useRaderMult() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).useRaderMult) as usize - ptr as usize
            },
            1848usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(useRaderMult)
            )
        );
    }
    test_field_useRaderMult();
    fn test_field_additionalRaderSharedSize() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).additionalRaderSharedSize) as usize - ptr as usize
            },
            1856usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(additionalRaderSharedSize)
            )
        );
    }
    test_field_additionalRaderSharedSize();
    fn test_field_RaderKernelOffsetShared() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RaderKernelOffsetShared) as usize - ptr as usize
            },
            1864usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(RaderKernelOffsetShared)
            )
        );
    }
    test_field_RaderKernelOffsetShared();
    fn test_field_RaderKernelOffsetLUT() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RaderKernelOffsetLUT) as usize - ptr as usize
            },
            2128usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(RaderKernelOffsetLUT)
            )
        );
    }
    test_field_RaderKernelOffsetLUT();
    fn test_field_rader_generator() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rader_generator) as usize - ptr as usize
            },
            2392usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(rader_generator)
            )
        );
    }
    test_field_rader_generator();
    fn test_field_fixMinRaderPrimeMult() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fixMinRaderPrimeMult) as usize - ptr as usize
            },
            2656usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(fixMinRaderPrimeMult)
            )
        );
    }
    test_field_fixMinRaderPrimeMult();
    fn test_field_fixMaxRaderPrimeMult() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fixMaxRaderPrimeMult) as usize - ptr as usize
            },
            2664usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(fixMaxRaderPrimeMult)
            )
        );
    }
    test_field_fixMaxRaderPrimeMult();
    fn test_field_fixMinRaderPrimeFFT() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fixMinRaderPrimeFFT) as usize - ptr as usize
            },
            2672usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(fixMinRaderPrimeFFT)
            )
        );
    }
    test_field_fixMinRaderPrimeFFT();
    fn test_field_fixMaxRaderPrimeFFT() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fixMaxRaderPrimeFFT) as usize - ptr as usize
            },
            2680usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(fixMaxRaderPrimeFFT)
            )
        );
    }
    test_field_fixMaxRaderPrimeFFT();
    fn test_field_inline_rader_g_pow() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inline_rader_g_pow) as usize - ptr as usize
            },
            2688usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(inline_rader_g_pow)
            )
        );
    }
    test_field_inline_rader_g_pow();
    fn test_field_inline_rader_kernel() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inline_rader_kernel) as usize - ptr as usize
            },
            2696usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(inline_rader_kernel)
            )
        );
    }
    test_field_inline_rader_kernel();
    fn test_field_raderRegisters() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).raderRegisters) as usize - ptr as usize
            },
            2704usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(raderRegisters)
            )
        );
    }
    test_field_raderRegisters();
    fn test_field_rader_min_registers() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rader_min_registers) as usize - ptr as usize
            },
            2712usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(rader_min_registers)
            )
        );
    }
    test_field_rader_min_registers();
    fn test_field_useRaderFFT() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).useRaderFFT) as usize - ptr as usize
            },
            2720usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(useRaderFFT)
            )
        );
    }
    test_field_useRaderFFT();
    fn test_field_performOffsetUpdate() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).performOffsetUpdate) as usize - ptr as usize
            },
            2728usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(performOffsetUpdate)
            )
        );
    }
    test_field_performOffsetUpdate();
    fn test_field_performBufferSetUpdate() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).performBufferSetUpdate) as usize - ptr as usize
            },
            2736usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(performBufferSetUpdate)
            )
        );
    }
    test_field_performBufferSetUpdate();
    fn test_field_useUint64() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).useUint64) as usize - ptr as usize
            },
            2744usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(useUint64)
            )
        );
    }
    test_field_useUint64();
    fn test_field_disableSetLocale() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).disableSetLocale) as usize - ptr as usize
            },
            2752usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(disableSetLocale)
            )
        );
    }
    test_field_disableSetLocale();
    fn test_field_regIDs() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).regIDs) as usize - ptr as usize
            },
            2760usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(regIDs)
            )
        );
    }
    test_field_regIDs();
    fn test_field_disableThreadsStart() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).disableThreadsStart) as usize - ptr as usize
            },
            2768usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(disableThreadsStart)
            )
        );
    }
    test_field_disableThreadsStart();
    fn test_field_disableThreadsEnd() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).disableThreadsEnd) as usize - ptr as usize
            },
            2776usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(disableThreadsEnd)
            )
        );
    }
    test_field_disableThreadsEnd();
    fn test_field_sdataID() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sdataID) as usize - ptr as usize
            },
            2784usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(sdataID)
            )
        );
    }
    test_field_sdataID();
    fn test_field_inoutID() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inoutID) as usize - ptr as usize
            },
            2834usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(inoutID)
            )
        );
    }
    test_field_inoutID();
    fn test_field_combinedID() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).combinedID) as usize - ptr as usize
            },
            2884usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(combinedID)
            )
        );
    }
    test_field_combinedID();
    fn test_field_raderIDx() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).raderIDx) as usize - ptr as usize
            },
            2934usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(raderIDx)
            )
        );
    }
    test_field_raderIDx();
    fn test_field_raderIDx2() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).raderIDx2) as usize - ptr as usize
            },
            2984usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(raderIDx2)
            )
        );
    }
    test_field_raderIDx2();
    fn test_field_gl_LocalInvocationID_x() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gl_LocalInvocationID_x) as usize - ptr as usize
            },
            3034usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(gl_LocalInvocationID_x)
            )
        );
    }
    test_field_gl_LocalInvocationID_x();
    fn test_field_gl_LocalInvocationID_y() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gl_LocalInvocationID_y) as usize - ptr as usize
            },
            3084usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(gl_LocalInvocationID_y)
            )
        );
    }
    test_field_gl_LocalInvocationID_y();
    fn test_field_gl_LocalInvocationID_z() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gl_LocalInvocationID_z) as usize - ptr as usize
            },
            3134usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(gl_LocalInvocationID_z)
            )
        );
    }
    test_field_gl_LocalInvocationID_z();
    fn test_field_gl_GlobalInvocationID_x() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gl_GlobalInvocationID_x) as usize - ptr as usize
            },
            3184usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(gl_GlobalInvocationID_x)
            )
        );
    }
    test_field_gl_GlobalInvocationID_x();
    fn test_field_gl_GlobalInvocationID_y() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gl_GlobalInvocationID_y) as usize - ptr as usize
            },
            3384usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(gl_GlobalInvocationID_y)
            )
        );
    }
    test_field_gl_GlobalInvocationID_y();
    fn test_field_gl_GlobalInvocationID_z() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gl_GlobalInvocationID_z) as usize - ptr as usize
            },
            3584usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(gl_GlobalInvocationID_z)
            )
        );
    }
    test_field_gl_GlobalInvocationID_z();
    fn test_field_gl_SubgroupInvocationID() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gl_SubgroupInvocationID) as usize - ptr as usize
            },
            3784usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(gl_SubgroupInvocationID)
            )
        );
    }
    test_field_gl_SubgroupInvocationID();
    fn test_field_gl_SubgroupID() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gl_SubgroupID) as usize - ptr as usize
            },
            3984usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(gl_SubgroupID)
            )
        );
    }
    test_field_gl_SubgroupID();
    fn test_field_tshuffle() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tshuffle) as usize - ptr as usize
            },
            4184usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(tshuffle)
            )
        );
    }
    test_field_tshuffle();
    fn test_field_sharedStride() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sharedStride) as usize - ptr as usize
            },
            4234usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(sharedStride)
            )
        );
    }
    test_field_sharedStride();
    fn test_field_gl_WorkGroupSize_x() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gl_WorkGroupSize_x) as usize - ptr as usize
            },
            4284usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(gl_WorkGroupSize_x)
            )
        );
    }
    test_field_gl_WorkGroupSize_x();
    fn test_field_gl_WorkGroupSize_y() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gl_WorkGroupSize_y) as usize - ptr as usize
            },
            4334usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(gl_WorkGroupSize_y)
            )
        );
    }
    test_field_gl_WorkGroupSize_y();
    fn test_field_gl_WorkGroupSize_z() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gl_WorkGroupSize_z) as usize - ptr as usize
            },
            4384usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(gl_WorkGroupSize_z)
            )
        );
    }
    test_field_gl_WorkGroupSize_z();
    fn test_field_gl_WorkGroupID_x() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gl_WorkGroupID_x) as usize - ptr as usize
            },
            4434usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(gl_WorkGroupID_x)
            )
        );
    }
    test_field_gl_WorkGroupID_x();
    fn test_field_gl_WorkGroupID_y() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gl_WorkGroupID_y) as usize - ptr as usize
            },
            4484usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(gl_WorkGroupID_y)
            )
        );
    }
    test_field_gl_WorkGroupID_y();
    fn test_field_gl_WorkGroupID_z() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gl_WorkGroupID_z) as usize - ptr as usize
            },
            4534usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(gl_WorkGroupID_z)
            )
        );
    }
    test_field_gl_WorkGroupID_z();
    fn test_field_tempReg() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tempReg) as usize - ptr as usize
            },
            4584usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(tempReg)
            )
        );
    }
    test_field_tempReg();
    fn test_field_stageInvocationID() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stageInvocationID) as usize - ptr as usize
            },
            4634usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(stageInvocationID)
            )
        );
    }
    test_field_stageInvocationID();
    fn test_field_blockInvocationID() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).blockInvocationID) as usize - ptr as usize
            },
            4684usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(blockInvocationID)
            )
        );
    }
    test_field_blockInvocationID();
    fn test_field_temp() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).temp) as usize - ptr as usize
            },
            4734usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(temp)
            )
        );
    }
    test_field_temp();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            4784usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
    fn test_field_iw() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iw) as usize - ptr as usize
            },
            4834usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(iw)
            )
        );
    }
    test_field_iw();
    fn test_field_x0() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x0) as usize - ptr as usize
            },
            4884usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(x0)
            )
        );
    }
    test_field_x0();
    fn test_field_locID() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).locID) as usize - ptr as usize
            },
            6204usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(locID)
            )
        );
    }
    test_field_locID();
    fn test_field_code0() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).code0) as usize - ptr as usize
            },
            7528usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(code0)
            )
        );
    }
    test_field_code0();
    fn test_field_output() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).output) as usize - ptr as usize
            },
            7536usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(output)
            )
        );
    }
    test_field_output();
    fn test_field_tempStr() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tempStr) as usize - ptr as usize
            },
            7544usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(tempStr)
            )
        );
    }
    test_field_tempStr();
    fn test_field_tempLen() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tempLen) as usize - ptr as usize
            },
            7552usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(tempLen)
            )
        );
    }
    test_field_tempLen();
    fn test_field_currentLen() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).currentLen) as usize - ptr as usize
            },
            7560usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(currentLen)
            )
        );
    }
    test_field_currentLen();
    fn test_field_maxCodeLength() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).maxCodeLength) as usize - ptr as usize
            },
            7568usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(maxCodeLength)
            )
        );
    }
    test_field_maxCodeLength();
    fn test_field_maxTempLength() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).maxTempLength) as usize - ptr as usize
            },
            7576usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(maxTempLength)
            )
        );
    }
    test_field_maxTempLength();
    fn test_field_oldLocale() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VkFFTSpecializationConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).oldLocale) as usize - ptr as usize
            },
            7584usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTSpecializationConstantsLayout),
                "::",
                stringify!(oldLocale)
            )
        );
    }
    test_field_oldLocale();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFFTPushConstantsLayout {
    pub dataUint32: [u32; 10usize],
    pub dataUint64: [u64; 10usize],
    pub performWorkGroupShift: [u64; 3usize],
    pub workGroupShift: [u64; 3usize],
    pub performPostCompilationInputOffset: u64,
    pub inputOffset: u64,
    pub performPostCompilationOutputOffset: u64,
    pub outputOffset: u64,
    pub performPostCompilationKernelOffset: u64,
    pub kernelOffset: u64,
    pub structSize: u64,
}
#[test]
fn bindgen_test_layout_VkFFTPushConstantsLayout() {
    assert_eq!(
        ::std::mem::size_of::<VkFFTPushConstantsLayout>(),
        224usize,
        concat!("Size of: ", stringify!(VkFFTPushConstantsLayout))
    );
    assert_eq!(
        ::std::mem::align_of::<VkFFTPushConstantsLayout>(),
        8usize,
        concat!("Alignment of ", stringify!(VkFFTPushConstantsLayout))
    );
    fn test_field_dataUint32() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTPushConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dataUint32) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTPushConstantsLayout),
                "::",
                stringify!(dataUint32)
            )
        );
    }
    test_field_dataUint32();
    fn test_field_dataUint64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTPushConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dataUint64) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTPushConstantsLayout),
                "::",
                stringify!(dataUint64)
            )
        );
    }
    test_field_dataUint64();
    fn test_field_performWorkGroupShift() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTPushConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).performWorkGroupShift) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTPushConstantsLayout),
                "::",
                stringify!(performWorkGroupShift)
            )
        );
    }
    test_field_performWorkGroupShift();
    fn test_field_workGroupShift() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTPushConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).workGroupShift) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTPushConstantsLayout),
                "::",
                stringify!(workGroupShift)
            )
        );
    }
    test_field_workGroupShift();
    fn test_field_performPostCompilationInputOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTPushConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).performPostCompilationInputOffset) as usize
                    - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTPushConstantsLayout),
                "::",
                stringify!(performPostCompilationInputOffset)
            )
        );
    }
    test_field_performPostCompilationInputOffset();
    fn test_field_inputOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTPushConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inputOffset) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTPushConstantsLayout),
                "::",
                stringify!(inputOffset)
            )
        );
    }
    test_field_inputOffset();
    fn test_field_performPostCompilationOutputOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTPushConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).performPostCompilationOutputOffset) as usize
                    - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTPushConstantsLayout),
                "::",
                stringify!(performPostCompilationOutputOffset)
            )
        );
    }
    test_field_performPostCompilationOutputOffset();
    fn test_field_outputOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTPushConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).outputOffset) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTPushConstantsLayout),
                "::",
                stringify!(outputOffset)
            )
        );
    }
    test_field_outputOffset();
    fn test_field_performPostCompilationKernelOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTPushConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).performPostCompilationKernelOffset) as usize
                    - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTPushConstantsLayout),
                "::",
                stringify!(performPostCompilationKernelOffset)
            )
        );
    }
    test_field_performPostCompilationKernelOffset();
    fn test_field_kernelOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTPushConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).kernelOffset) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTPushConstantsLayout),
                "::",
                stringify!(kernelOffset)
            )
        );
    }
    test_field_kernelOffset();
    fn test_field_structSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTPushConstantsLayout>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTPushConstantsLayout),
                "::",
                stringify!(structSize)
            )
        );
    }
    test_field_structSize();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFFTAxis {
    pub numBindings: u64,
    pub axisBlock: [u64; 4usize],
    pub groupedBatch: u64,
    pub specializationConstants: VkFFTSpecializationConstantsLayout,
    pub pushConstants: VkFFTPushConstantsLayout,
    pub updatePushConstants: u64,
    pub inputBuffer: *mut VkBuffer,
    pub outputBuffer: *mut VkBuffer,
    pub descriptorPool: VkDescriptorPool,
    pub descriptorSetLayout: VkDescriptorSetLayout,
    pub descriptorSet: VkDescriptorSet,
    pub pipelineLayout: VkPipelineLayout,
    pub pipeline: VkPipeline,
    pub bufferLUTDeviceMemory: VkDeviceMemory,
    pub bufferLUT: VkBuffer,
    pub bufferRaderUintLUTDeviceMemory: VkDeviceMemory,
    pub bufferRaderUintLUT: VkBuffer,
    pub bufferBluesteinDeviceMemory: *mut VkDeviceMemory,
    pub bufferBluesteinFFTDeviceMemory: *mut VkDeviceMemory,
    pub bufferBluestein: *mut VkBuffer,
    pub bufferBluesteinFFT: *mut VkBuffer,
    pub binary: *mut ::std::os::raw::c_void,
    pub binarySize: u64,
    pub bufferLUTSize: u64,
    pub bufferRaderUintLUTSize: u64,
    pub referenceLUT: u64,
}
#[test]
fn bindgen_test_layout_VkFFTAxis() {
    assert_eq!(
        ::std::mem::size_of::<VkFFTAxis>(),
        8128usize,
        concat!("Size of: ", stringify!(VkFFTAxis))
    );
    assert_eq!(
        ::std::mem::align_of::<VkFFTAxis>(),
        8usize,
        concat!("Alignment of ", stringify!(VkFFTAxis))
    );
    fn test_field_numBindings() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTAxis>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numBindings) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTAxis),
                "::",
                stringify!(numBindings)
            )
        );
    }
    test_field_numBindings();
    fn test_field_axisBlock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTAxis>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).axisBlock) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTAxis),
                "::",
                stringify!(axisBlock)
            )
        );
    }
    test_field_axisBlock();
    fn test_field_groupedBatch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTAxis>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).groupedBatch) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTAxis),
                "::",
                stringify!(groupedBatch)
            )
        );
    }
    test_field_groupedBatch();
    fn test_field_specializationConstants() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTAxis>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).specializationConstants) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTAxis),
                "::",
                stringify!(specializationConstants)
            )
        );
    }
    test_field_specializationConstants();
    fn test_field_pushConstants() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTAxis>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pushConstants) as usize - ptr as usize
            },
            7736usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTAxis),
                "::",
                stringify!(pushConstants)
            )
        );
    }
    test_field_pushConstants();
    fn test_field_updatePushConstants() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTAxis>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).updatePushConstants) as usize - ptr as usize
            },
            7960usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTAxis),
                "::",
                stringify!(updatePushConstants)
            )
        );
    }
    test_field_updatePushConstants();
    fn test_field_inputBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTAxis>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inputBuffer) as usize - ptr as usize
            },
            7968usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTAxis),
                "::",
                stringify!(inputBuffer)
            )
        );
    }
    test_field_inputBuffer();
    fn test_field_outputBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTAxis>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).outputBuffer) as usize - ptr as usize
            },
            7976usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTAxis),
                "::",
                stringify!(outputBuffer)
            )
        );
    }
    test_field_outputBuffer();
    fn test_field_descriptorPool() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTAxis>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).descriptorPool) as usize - ptr as usize
            },
            7984usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTAxis),
                "::",
                stringify!(descriptorPool)
            )
        );
    }
    test_field_descriptorPool();
    fn test_field_descriptorSetLayout() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTAxis>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).descriptorSetLayout) as usize - ptr as usize
            },
            7992usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTAxis),
                "::",
                stringify!(descriptorSetLayout)
            )
        );
    }
    test_field_descriptorSetLayout();
    fn test_field_descriptorSet() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTAxis>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).descriptorSet) as usize - ptr as usize
            },
            8000usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTAxis),
                "::",
                stringify!(descriptorSet)
            )
        );
    }
    test_field_descriptorSet();
    fn test_field_pipelineLayout() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTAxis>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pipelineLayout) as usize - ptr as usize
            },
            8008usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTAxis),
                "::",
                stringify!(pipelineLayout)
            )
        );
    }
    test_field_pipelineLayout();
    fn test_field_pipeline() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTAxis>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pipeline) as usize - ptr as usize
            },
            8016usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTAxis),
                "::",
                stringify!(pipeline)
            )
        );
    }
    test_field_pipeline();
    fn test_field_bufferLUTDeviceMemory() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTAxis>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferLUTDeviceMemory) as usize - ptr as usize
            },
            8024usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTAxis),
                "::",
                stringify!(bufferLUTDeviceMemory)
            )
        );
    }
    test_field_bufferLUTDeviceMemory();
    fn test_field_bufferLUT() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTAxis>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferLUT) as usize - ptr as usize
            },
            8032usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTAxis),
                "::",
                stringify!(bufferLUT)
            )
        );
    }
    test_field_bufferLUT();
    fn test_field_bufferRaderUintLUTDeviceMemory() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTAxis>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferRaderUintLUTDeviceMemory) as usize - ptr as usize
            },
            8040usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTAxis),
                "::",
                stringify!(bufferRaderUintLUTDeviceMemory)
            )
        );
    }
    test_field_bufferRaderUintLUTDeviceMemory();
    fn test_field_bufferRaderUintLUT() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTAxis>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferRaderUintLUT) as usize - ptr as usize
            },
            8048usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTAxis),
                "::",
                stringify!(bufferRaderUintLUT)
            )
        );
    }
    test_field_bufferRaderUintLUT();
    fn test_field_bufferBluesteinDeviceMemory() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTAxis>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferBluesteinDeviceMemory) as usize - ptr as usize
            },
            8056usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTAxis),
                "::",
                stringify!(bufferBluesteinDeviceMemory)
            )
        );
    }
    test_field_bufferBluesteinDeviceMemory();
    fn test_field_bufferBluesteinFFTDeviceMemory() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTAxis>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferBluesteinFFTDeviceMemory) as usize - ptr as usize
            },
            8064usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTAxis),
                "::",
                stringify!(bufferBluesteinFFTDeviceMemory)
            )
        );
    }
    test_field_bufferBluesteinFFTDeviceMemory();
    fn test_field_bufferBluestein() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTAxis>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferBluestein) as usize - ptr as usize
            },
            8072usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTAxis),
                "::",
                stringify!(bufferBluestein)
            )
        );
    }
    test_field_bufferBluestein();
    fn test_field_bufferBluesteinFFT() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTAxis>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferBluesteinFFT) as usize - ptr as usize
            },
            8080usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTAxis),
                "::",
                stringify!(bufferBluesteinFFT)
            )
        );
    }
    test_field_bufferBluesteinFFT();
    fn test_field_binary() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTAxis>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).binary) as usize - ptr as usize
            },
            8088usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTAxis),
                "::",
                stringify!(binary)
            )
        );
    }
    test_field_binary();
    fn test_field_binarySize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTAxis>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).binarySize) as usize - ptr as usize
            },
            8096usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTAxis),
                "::",
                stringify!(binarySize)
            )
        );
    }
    test_field_binarySize();
    fn test_field_bufferLUTSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTAxis>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferLUTSize) as usize - ptr as usize
            },
            8104usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTAxis),
                "::",
                stringify!(bufferLUTSize)
            )
        );
    }
    test_field_bufferLUTSize();
    fn test_field_bufferRaderUintLUTSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTAxis>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferRaderUintLUTSize) as usize - ptr as usize
            },
            8112usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTAxis),
                "::",
                stringify!(bufferRaderUintLUTSize)
            )
        );
    }
    test_field_bufferRaderUintLUTSize();
    fn test_field_referenceLUT() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTAxis>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).referenceLUT) as usize - ptr as usize
            },
            8120usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTAxis),
                "::",
                stringify!(referenceLUT)
            )
        );
    }
    test_field_referenceLUT();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFFTPlan {
    pub actualFFTSizePerAxis: [[u64; 3usize]; 3usize],
    pub numAxisUploads: [u64; 3usize],
    pub axisSplit: [[u64; 4usize]; 3usize],
    pub axes: [[VkFFTAxis; 4usize]; 3usize],
    pub multiUploadR2C: u64,
    pub actualPerformR2CPerAxis: [u64; 3usize],
    pub R2Cdecomposition: VkFFTAxis,
    pub inverseBluesteinAxes: [[VkFFTAxis; 4usize]; 3usize],
}
#[test]
fn bindgen_test_layout_VkFFTPlan() {
    assert_eq!(
        ::std::mem::size_of::<VkFFTPlan>(),
        203424usize,
        concat!("Size of: ", stringify!(VkFFTPlan))
    );
    assert_eq!(
        ::std::mem::align_of::<VkFFTPlan>(),
        8usize,
        concat!("Alignment of ", stringify!(VkFFTPlan))
    );
    fn test_field_actualFFTSizePerAxis() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTPlan>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actualFFTSizePerAxis) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTPlan),
                "::",
                stringify!(actualFFTSizePerAxis)
            )
        );
    }
    test_field_actualFFTSizePerAxis();
    fn test_field_numAxisUploads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTPlan>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numAxisUploads) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTPlan),
                "::",
                stringify!(numAxisUploads)
            )
        );
    }
    test_field_numAxisUploads();
    fn test_field_axisSplit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTPlan>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).axisSplit) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTPlan),
                "::",
                stringify!(axisSplit)
            )
        );
    }
    test_field_axisSplit();
    fn test_field_axes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTPlan>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).axes) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTPlan),
                "::",
                stringify!(axes)
            )
        );
    }
    test_field_axes();
    fn test_field_multiUploadR2C() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTPlan>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).multiUploadR2C) as usize - ptr as usize
            },
            97728usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTPlan),
                "::",
                stringify!(multiUploadR2C)
            )
        );
    }
    test_field_multiUploadR2C();
    fn test_field_actualPerformR2CPerAxis() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTPlan>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actualPerformR2CPerAxis) as usize - ptr as usize
            },
            97736usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTPlan),
                "::",
                stringify!(actualPerformR2CPerAxis)
            )
        );
    }
    test_field_actualPerformR2CPerAxis();
    fn test_field_R2Cdecomposition() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTPlan>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).R2Cdecomposition) as usize - ptr as usize
            },
            97760usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTPlan),
                "::",
                stringify!(R2Cdecomposition)
            )
        );
    }
    test_field_R2Cdecomposition();
    fn test_field_inverseBluesteinAxes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTPlan>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inverseBluesteinAxes) as usize - ptr as usize
            },
            105888usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTPlan),
                "::",
                stringify!(inverseBluesteinAxes)
            )
        );
    }
    test_field_inverseBluesteinAxes();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFFTApplication {
    pub configuration: VkFFTConfiguration,
    pub localFFTPlan: *mut VkFFTPlan,
    pub localFFTPlan_inverse: *mut VkFFTPlan,
    pub actualNumBatches: u64,
    pub firstAxis: u64,
    pub lastAxis: u64,
    pub useBluesteinFFT: [u64; 3usize],
    pub bufferRaderUintLUTDeviceMemory: [[VkDeviceMemory; 4usize]; 3usize],
    pub bufferRaderUintLUT: [[VkBuffer; 4usize]; 3usize],
    pub bufferBluesteinDeviceMemory: [VkDeviceMemory; 3usize],
    pub bufferBluesteinFFTDeviceMemory: [VkDeviceMemory; 3usize],
    pub bufferBluesteinIFFTDeviceMemory: [VkDeviceMemory; 3usize],
    pub bufferBluestein: [VkBuffer; 3usize],
    pub bufferBluesteinFFT: [VkBuffer; 3usize],
    pub bufferBluesteinIFFT: [VkBuffer; 3usize],
    pub bufferRaderUintLUTSize: [[u64; 4usize]; 3usize],
    pub bufferBluesteinSize: [u64; 3usize],
    pub applicationBluesteinString: [*mut ::std::os::raw::c_void; 3usize],
    pub applicationBluesteinStringSize: [u64; 3usize],
    pub numRaderFFTPrimes: u64,
    pub rader_primes: [u64; 30usize],
    pub rader_buffer_size: [u64; 30usize],
    pub raderFFTkernel: [*mut ::std::os::raw::c_void; 30usize],
    pub applicationStringOffsetRader: u64,
    pub currentApplicationStringPos: u64,
    pub applicationStringSize: u64,
    pub saveApplicationString: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkFFTApplication() {
    assert_eq!(
        ::std::mem::size_of::<VkFFTApplication>(),
        2376usize,
        concat!("Size of: ", stringify!(VkFFTApplication))
    );
    assert_eq!(
        ::std::mem::align_of::<VkFFTApplication>(),
        8usize,
        concat!("Alignment of ", stringify!(VkFFTApplication))
    );
    fn test_field_configuration() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).configuration) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(configuration)
            )
        );
    }
    test_field_configuration();
    fn test_field_localFFTPlan() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).localFFTPlan) as usize - ptr as usize
            },
            1048usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(localFFTPlan)
            )
        );
    }
    test_field_localFFTPlan();
    fn test_field_localFFTPlan_inverse() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).localFFTPlan_inverse) as usize - ptr as usize
            },
            1056usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(localFFTPlan_inverse)
            )
        );
    }
    test_field_localFFTPlan_inverse();
    fn test_field_actualNumBatches() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actualNumBatches) as usize - ptr as usize
            },
            1064usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(actualNumBatches)
            )
        );
    }
    test_field_actualNumBatches();
    fn test_field_firstAxis() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).firstAxis) as usize - ptr as usize
            },
            1072usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(firstAxis)
            )
        );
    }
    test_field_firstAxis();
    fn test_field_lastAxis() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lastAxis) as usize - ptr as usize
            },
            1080usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(lastAxis)
            )
        );
    }
    test_field_lastAxis();
    fn test_field_useBluesteinFFT() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).useBluesteinFFT) as usize - ptr as usize
            },
            1088usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(useBluesteinFFT)
            )
        );
    }
    test_field_useBluesteinFFT();
    fn test_field_bufferRaderUintLUTDeviceMemory() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferRaderUintLUTDeviceMemory) as usize - ptr as usize
            },
            1112usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(bufferRaderUintLUTDeviceMemory)
            )
        );
    }
    test_field_bufferRaderUintLUTDeviceMemory();
    fn test_field_bufferRaderUintLUT() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferRaderUintLUT) as usize - ptr as usize
            },
            1208usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(bufferRaderUintLUT)
            )
        );
    }
    test_field_bufferRaderUintLUT();
    fn test_field_bufferBluesteinDeviceMemory() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferBluesteinDeviceMemory) as usize - ptr as usize
            },
            1304usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(bufferBluesteinDeviceMemory)
            )
        );
    }
    test_field_bufferBluesteinDeviceMemory();
    fn test_field_bufferBluesteinFFTDeviceMemory() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferBluesteinFFTDeviceMemory) as usize - ptr as usize
            },
            1328usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(bufferBluesteinFFTDeviceMemory)
            )
        );
    }
    test_field_bufferBluesteinFFTDeviceMemory();
    fn test_field_bufferBluesteinIFFTDeviceMemory() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferBluesteinIFFTDeviceMemory) as usize - ptr as usize
            },
            1352usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(bufferBluesteinIFFTDeviceMemory)
            )
        );
    }
    test_field_bufferBluesteinIFFTDeviceMemory();
    fn test_field_bufferBluestein() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferBluestein) as usize - ptr as usize
            },
            1376usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(bufferBluestein)
            )
        );
    }
    test_field_bufferBluestein();
    fn test_field_bufferBluesteinFFT() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferBluesteinFFT) as usize - ptr as usize
            },
            1400usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(bufferBluesteinFFT)
            )
        );
    }
    test_field_bufferBluesteinFFT();
    fn test_field_bufferBluesteinIFFT() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferBluesteinIFFT) as usize - ptr as usize
            },
            1424usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(bufferBluesteinIFFT)
            )
        );
    }
    test_field_bufferBluesteinIFFT();
    fn test_field_bufferRaderUintLUTSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferRaderUintLUTSize) as usize - ptr as usize
            },
            1448usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(bufferRaderUintLUTSize)
            )
        );
    }
    test_field_bufferRaderUintLUTSize();
    fn test_field_bufferBluesteinSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferBluesteinSize) as usize - ptr as usize
            },
            1544usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(bufferBluesteinSize)
            )
        );
    }
    test_field_bufferBluesteinSize();
    fn test_field_applicationBluesteinString() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).applicationBluesteinString) as usize - ptr as usize
            },
            1568usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(applicationBluesteinString)
            )
        );
    }
    test_field_applicationBluesteinString();
    fn test_field_applicationBluesteinStringSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).applicationBluesteinStringSize) as usize - ptr as usize
            },
            1592usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(applicationBluesteinStringSize)
            )
        );
    }
    test_field_applicationBluesteinStringSize();
    fn test_field_numRaderFFTPrimes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numRaderFFTPrimes) as usize - ptr as usize
            },
            1616usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(numRaderFFTPrimes)
            )
        );
    }
    test_field_numRaderFFTPrimes();
    fn test_field_rader_primes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rader_primes) as usize - ptr as usize
            },
            1624usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(rader_primes)
            )
        );
    }
    test_field_rader_primes();
    fn test_field_rader_buffer_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rader_buffer_size) as usize - ptr as usize
            },
            1864usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(rader_buffer_size)
            )
        );
    }
    test_field_rader_buffer_size();
    fn test_field_raderFFTkernel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).raderFFTkernel) as usize - ptr as usize
            },
            2104usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(raderFFTkernel)
            )
        );
    }
    test_field_raderFFTkernel();
    fn test_field_applicationStringOffsetRader() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).applicationStringOffsetRader) as usize - ptr as usize
            },
            2344usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(applicationStringOffsetRader)
            )
        );
    }
    test_field_applicationStringOffsetRader();
    fn test_field_currentApplicationStringPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).currentApplicationStringPos) as usize - ptr as usize
            },
            2352usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(currentApplicationStringPos)
            )
        );
    }
    test_field_currentApplicationStringPos();
    fn test_field_applicationStringSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).applicationStringSize) as usize - ptr as usize
            },
            2360usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(applicationStringSize)
            )
        );
    }
    test_field_applicationStringSize();
    fn test_field_saveApplicationString() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VkFFTApplication>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).saveApplicationString) as usize - ptr as usize
            },
            2368usize,
            concat!(
                "Offset of field: ",
                stringify!(VkFFTApplication),
                "::",
                stringify!(saveApplicationString)
            )
        );
    }
    test_field_saveApplicationString();
}
extern "C" {
    #[link_name = "\u{1}?initializeVkFFT@@YA?AW4VkFFTResult@@PEAUVkFFTApplication@@UVkFFTConfiguration@@@Z"]
    pub fn initializeVkFFT(
        app: *mut VkFFTApplication,
        inputLaunchConfiguration: VkFFTConfiguration,
    ) -> VkFFTResult;
}
extern "C" {
    #[link_name = "\u{1}?VkFFTAppend@@YA?AW4VkFFTResult@@PEAUVkFFTApplication@@HPEAUVkFFTLaunchParams@@@Z"]
    pub fn VkFFTAppend(
        app: *mut VkFFTApplication,
        inverse: ::std::os::raw::c_int,
        launchParams: *mut VkFFTLaunchParams,
    ) -> VkFFTResult;
}
extern "C" {
    #[link_name = "\u{1}?deleteVkFFT@@YAXPEAUVkFFTApplication@@@Z"]
    pub fn deleteVkFFT(app: *mut VkFFTApplication);
}
extern "C" {
    #[link_name = "\u{1}?VkFFTPlanAxis@@YA?AW4VkFFTResult@@PEAUVkFFTApplication@@PEAUVkFFTPlan@@_K222@Z"]
    pub fn VkFFTPlanAxis(
        app: *mut VkFFTApplication,
        FFTPlan: *mut VkFFTPlan,
        axis_id: u64,
        axis_upload_id: u64,
        inverse: u64,
        reverseBluesteinMultiUpload: u64,
    ) -> VkFFTResult;
}
extern "C" {
    #[link_name = "\u{1}?VkFFTSync@@YA?AW4VkFFTResult@@PEAUVkFFTApplication@@@Z"]
    pub fn VkFFTSync(app: *mut VkFFTApplication) -> VkFFTResult;
}
extern "C" {
    #[link_name = "\u{1}?VkFFTGetVersion@@YAHXZ"]
    pub fn VkFFTGetVersion() -> ::std::os::raw::c_int;
}
